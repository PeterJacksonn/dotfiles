CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             where db_addr not like 'B1%'
                             ORDER BY pn.db_addr, pn.server_name

                             LIMIT 10
                     ),

        mimic_cte AS (
                         SELECT
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 10;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        mimic_cte AS (
                         SELECT
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             limit 1000
                     ),

        mimic_cte AS (
                         SELECT
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             LIMIT 1000
                     ),

        mimic_cte AS (
                         SELECT
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 1000;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works(mapped_name TEXT, failure_dbbool_name TEXT, connectionstat TEXT,
                                            commandstat TEXT, autofallback TEXT, configstat TEXT,
                                            maintenancedbbool TEXT,
                                            connecteddbbool TEXT, siteactivity TEXT, requeststage TEXT,
                                            outofcontact TEXT)
    RETURNS TEXT
    LANGUAGE plpgsql AS
$$
DECLARE
    full_works  TEXT;
    site_id1    TEXT;
    site_id2    TEXT;
    site_name   TEXT;
    part        TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    if full_works != 'Unknown' then
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := initcap(SUBSTRING(full_works from 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := initcap(substring(full_works from 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        foreach part in array string_to_array(full_works, ' ')
            loop
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                if lower(part) in ('stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu', 'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn', 'opp', 'fm') or lower(part) like ('plc%') then
                    part := upper(part);
                    final_works := final_works || part || ' ';
                else
                    final_works := final_works || part || ' ';
                end if;
            end loop;
        final_works := RTRIM(final_works);
        return final_works;

    end if;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     (
                                         SELECT COUNT(*)
                                             FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')) AS mimic_part
                                             WHERE mimic_part = ANY (works_parts)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR lower(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score and length(mimic_name)  DESC
            LIMIT 1;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Initial check on `db_address` and `server` with simple record count
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- Return immediately if there's only one match
    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- If no results, return
    IF match_count < 1 THEN
        RETURN;
    END IF;

    -- If multiple matches, check for `LAYOUT` filter
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND lower(object_name) = 'layout';


    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                AND lower(object_name) = 'layout'
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- Set layout_filter to TRUE if layout-specific filtering is needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names based on `works_parts` match count
    RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     (
                                         SELECT COUNT(*)
                                             FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')) AS mimic_part
                                             WHERE mimic_part = ANY (works_parts)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR lower(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score and length(mimic_name)  DESC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Initial check on `db_address` and `server` with simple record count
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- Return immediately if there's only one match
    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- If no results, return
    IF match_count < 1 THEN
        RETURN;
    END IF;

    -- If multiple matches, check for `LAYOUT` filter
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND lower(object_name) = 'layout';


    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                AND lower(object_name) = 'layout'
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- Set layout_filter to TRUE if layout-specific filtering is needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names based on `works_parts` match count
    RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     (
                                         SELECT COUNT(*)
                                             FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')) AS mimic_part
                                             WHERE mimic_part = ANY (works_parts)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR lower(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score, length(mimic_name)  DESC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Initial check on `db_address` and `server` with simple record count
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- Return immediately if there's only one match
    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- If no results, return
    IF match_count < 1 THEN
        RETURN;
    END IF;

    -- If multiple matches, check for `LAYOUT` filter
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND lower(object_name) = 'layout';


    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                AND lower(object_name) = 'layout'
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- Set layout_filter to TRUE if layout-specific filtering is needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names based on `works_parts` match count
    RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     (
                                         SELECT COUNT(*)
                                             FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')) AS mimic_part
                                             WHERE mimic_part = ANY (works_parts)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR lower(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score DESC, length(mimic_name)  ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                    AND LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names
    RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     (
                                         SELECT COUNT(*)
                                             FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')) AS mimic_part
                                             WHERE mimic_part = ANY (works_parts)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                    AND LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names
    RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     (
                                         SELECT COUNT(*)
                                             FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')[2:]) AS mimic_part
                                             WHERE mimic_part = ANY (works_parts)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                    AND LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names
    RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     (
                                         SELECT COUNT(*)
                                             FROM UNNEST((STRING_TO_ARRAY(mimic_name, '_'))[2:]) AS mimic_part
                                             WHERE mimic_part = ANY (works_parts)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Filtered dataset to minimize search space
    WITH filtered_data AS (
                              SELECT *
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data
        WHERE LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names with trigram similarity
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM filtered_data
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0 -- Filter to only include matches with a similarity score greater than 0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Use CTE to filter the dataset
    WITH filtered_data AS (
                              SELECT *
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )

    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;  -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data
        WHERE LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM filtered_data
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Filter to include only matches with a similarity score greater than 0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Use CTE to filter the dataset
    WITH filtered_data AS (
                              SELECT *
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )

    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;  -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data
        WHERE LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM filtered_data
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Filter to include only matches with a similarity score greater than 0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                    AND LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names with trigram similarity
    RETURN QUERY
        WITH
            mimic_matches AS (
                                 SELECT
                                     mimic_name,
                                     object_name,
                                     object_instance_name,
                                     GREATEST(
                                         -- Calculate similarity against all parts of `works_parts`
                                             COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                           FROM unnest(works_parts) AS part), 0)
                                     ) AS score
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                         AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                             )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0 -- Filter to only include matches with a similarity score greater than 0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             LIMIT 100
                     ),

        mimic_cte AS (
                         SELECT
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 100;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        mimic_cte AS (
                         SELECT
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 100;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        mimic_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 100;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Create temporary table to hold filtered data
    CREATE TEMP TABLE temp_mimic_usage AS
        SELECT *
            FROM mimic_usage_data
            WHERE (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    SELECT COUNT(*) INTO match_count FROM temp_mimic_usage;

    -- Return immediately if there's only one match
    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM temp_mimic_usage
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN; -- No matches found
    END IF;

    -- Check for layout matches
    SELECT COUNT(*) INTO match_count
                    FROM temp_mimic_usage
                    WHERE LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM temp_mimic_usage
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      (
                                          SELECT COUNT(*)
                                              FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')) AS mimic_part
                                              WHERE mimic_part = ANY (works_parts)
                                      ) AS score
                                      FROM temp_mimic_usage
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Create a temporary table for filtered results
    CREATE TEMP TABLE temp_filtered_data AS
        SELECT *
            FROM mimic_usage_data
            WHERE (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- Count matches
    SELECT COUNT(*)
        INTO match_count
        FROM temp_filtered_data;

    -- Return immediately if there's only one match
    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM temp_filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN; -- No matches found
    END IF;

    -- Check for layout matches
    SELECT COUNT(*)
        INTO match_count
        FROM temp_filtered_data
        WHERE LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM temp_filtered_data
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use CTE to score mimic names
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      (
                                          SELECT COUNT(*)
                                              FROM UNNEST(STRING_TO_ARRAY(mimic_name, '_')) AS mimic_part
                                              WHERE mimic_part = ANY (works_parts)
                                      ) AS score
                                      FROM temp_filtered_data
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

    -- Clean up temporary table
    DROP TABLE temp_filtered_data;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Cache filtered data once
    WITH filtered_data AS (
                              SELECT *
                                  FROM mimic_usage_data
                                  WHERE (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;  -- No matches found
    END IF;

    -- Count layout matches only if needed
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data
        WHERE LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use optimized scoring with CTE
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM filtered_data
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Cache the filtered data in a temporary table
    CREATE TEMP TABLE temp_filtered_data AS
        SELECT *
            FROM mimic_usage_data
            WHERE (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- Count matches directly into `match_count`
    SELECT COUNT(*)
        INTO match_count
        FROM temp_filtered_data;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM temp_filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;  -- No matches found
    END IF;

    -- Count layout matches only if needed
    SELECT COUNT(*)
        INTO match_count
        FROM temp_filtered_data
        WHERE LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM temp_filtered_data
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use optimized scoring with CTE
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM temp_filtered_data
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

    -- Clean up the temporary table
    DROP TABLE temp_filtered_data;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    WITH filtered_data AS (
                              SELECT *
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        RETURN QUERY
            WITH filtered_data AS (
                                      SELECT *
                                          FROM mimic_usage_data
                                          WHERE
                                              (other_value = db_address OR db_addr = db_address)
                                              AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                  )
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;  -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                    AND LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM mimic_usage_data
                                      WHERE
                                          (other_value = db_address OR db_addr = db_address)
                                          AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                          AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Include only matches with a similarity score greater than 0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    WITH filtered_data AS (
                              SELECT *
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        RETURN QUERY
            WITH filtered_data AS (
                                      SELECT *
                                          FROM mimic_usage_data
                                          WHERE
                                              (other_value = db_address OR db_addr = db_address)
                                              AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                  )
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;  -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                    AND LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
--     RETURN QUERY
--         WITH mimic_matches AS (
--                                   SELECT
--                                       mimic_name,
--                                       object_name,
--                                       object_instance_name,
--                                       GREATEST(
--                                               COALESCE((SELECT MAX(similarity(mimic_name, part))
--                                                             FROM unnest(works_parts) AS part), 0)
--                                       ) AS score
--                                       FROM mimic_usage_data
--                                       WHERE
--                                           (other_value = db_address OR db_addr = db_address)
--                                           AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
--                                           AND (NOT layout_filter OR LOWER(object_name) = 'layout')
--                               )
--         SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
--             FROM mimic_matches
--             WHERE score > 0.0  -- Include only matches with a similarity score greater than 0
--             ORDER BY score DESC, LENGTH(mimic_name) ASC
--             LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic (
                                                 db_address TEXT, works TEXT, server TEXT
                                             )
    RETURNS TABLE (
                      mi_name TEXT,
                      mi_object_name TEXT,
                      mi_object_instance TEXT
                  )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Filter data once at the beginning to avoid repetition
    WITH filtered_data AS (
                              SELECT mimic_name, object_name, object_instance_name
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )

    -- Check if there’s a single match directly with EXISTS
    IF EXISTS (SELECT 1 FROM filtered_data) THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    END IF;

    -- Check for "layout" matches directly with EXISTS
    IF EXISTS (SELECT 1 FROM filtered_data WHERE LOWER(object_name) = 'layout') THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                WHERE LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if there are multiple matches
    layout_filter := EXISTS (SELECT 1 FROM filtered_data WHERE LOWER(object_name) = 'layout');

    -- Score mimic names based on similarity to `works_parts`
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM filtered_data
                                      WHERE (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Only include matches with similarity score greater than 0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic (
                                                 db_address TEXT, works TEXT, server TEXT
                                             )
    RETURNS TABLE (
                      mi_name TEXT,
                      mi_object_name TEXT,
                      mi_object_instance TEXT
                  )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Check if there’s a single match using a CTE
    WITH filtered_data AS (
                              SELECT mimic_name, object_name, object_instance_name
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    END IF;

    -- Check for "layout" matches using layout_filter
    WITH layout_filtered AS (
                                SELECT mimic_name, object_name, object_instance_name
                                    FROM mimic_usage_data
                                    WHERE
                                        (other_value = db_address OR db_addr = db_address)
                                        AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                        AND LOWER(object_name) = 'layout'
                            )
    SELECT COUNT(*)
        INTO match_count
        FROM layout_filtered;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM layout_filtered
                LIMIT 1;
    ELSIF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use similarity scoring with optional layout filtering
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM mimic_usage_data
                                      WHERE
                                          (other_value = db_address OR db_addr = db_address)
                                          AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                          AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Only include matches with a positive similarity score
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic (
                                                 db_address TEXT, works TEXT, server TEXT
                                             )
    RETURNS TABLE (
                      mi_name TEXT,
                      mi_object_name TEXT,
                      mi_object_instance TEXT
                  )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    layout_filter BOOLEAN := FALSE;
    match_count TEXT;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Check if there’s a single match using a CTE
    WITH filtered_data AS (
                              SELECT mimic_name, object_name, object_instance_name
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    END IF;

    -- Check for "layout" matches using layout_filter
    WITH layout_filtered AS (
                                SELECT mimic_name, object_name, object_instance_name
                                    FROM mimic_usage_data
                                    WHERE
                                        (other_value = db_address OR db_addr = db_address)
                                        AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                        AND LOWER(object_name) = 'layout'
                            )
    SELECT COUNT(*)
        INTO match_count
        FROM layout_filtered;

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM layout_filtered
                LIMIT 1;
    ELSIF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use similarity scoring with optional layout filtering
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM mimic_usage_data
                                      WHERE
                                          (other_value = db_address OR db_addr = db_address)
                                          AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                          AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Only include matches with a positive similarity score
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic (
                                                 db_address TEXT, works TEXT, server TEXT
                                             )
    RETURNS TABLE (
                      mi_name TEXT,
                      mi_object_name TEXT,
                      mi_object_instance TEXT
                  )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    -- Convert input to uppercase for case-insensitive comparison
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` into an array of words
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Step 1: Check for an exact match on `db_address` and `server`
    WITH filtered_data AS (
                              SELECT mimic_name, object_name, object_instance_name
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    SELECT COUNT(*) INTO match_count FROM filtered_data;

    IF match_count = 1 THEN
        -- Return the single exact match
        RETURN QUERY SELECT mimic_name, object_name, object_instance_name
                         FROM filtered_data
                         LIMIT 1;
    ELSIF match_count < 1 THEN
        -- No matches found, so exit the function
        RETURN;
    END IF;

    -- Step 2: Check if there’s exactly one "layout" match
    WITH layout_filtered AS (
                                SELECT mimic_name, object_name, object_instance_name
                                    FROM mimic_usage_data
                                    WHERE
                                        (other_value = db_address OR db_addr = db_address)
                                        AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                        AND LOWER(object_name) = 'layout'
                            )
    SELECT COUNT(*) INTO match_count FROM layout_filtered;

    IF match_count = 1 THEN
        -- Return the single layout match
        RETURN QUERY SELECT mimic_name, object_name, object_instance_name
                         FROM layout_filtered
                         LIMIT 1;
    ELSIF match_count > 1 THEN
        -- Set flag for layout filtering if multiple layout matches found
        layout_filter := TRUE;
    END IF;

    -- Step 3: Use similarity scoring with optional layout filtering
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM mimic_usage_data
                                      WHERE
                                          (other_value = db_address OR db_addr = db_address)
                                          AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                          AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Only include matches with a positive similarity score
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic (
                                                 db_address TEXT, works TEXT, server TEXT
                                             )
    RETURNS TABLE (
                      mi_name TEXT,
                      mi_object_name TEXT,
                      mi_object_instance TEXT
                  )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    -- Convert input parameters to uppercase for uniform comparison
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` into an array of words
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Step 1: Check for an exact match on `db_address` and `server`
    WITH exact_match AS (
                            SELECT mimic_name, object_name, object_instance_name
                                FROM mimic_usage_data
                                WHERE
                                    (other_value = db_address OR db_addr = db_address)
                                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                        )
    SELECT COUNT(*) INTO match_count FROM exact_match;

    IF match_count = 1 THEN
        -- Return the single exact match
        RETURN QUERY SELECT mimic_name, object_name, object_instance_name
                         FROM exact_match
                         LIMIT 1;
    ELSIF match_count < 1 THEN
        -- No matches found, so exit the function
        RETURN;
    END IF;

    -- Step 2: Check if there’s exactly one "layout" match
    WITH layout_match AS (
                             SELECT mimic_name, object_name, object_instance_name
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                     AND LOWER(object_name) = 'layout'
                         )
    SELECT COUNT(*) INTO match_count FROM layout_match;

    IF match_count = 1 THEN
        -- Return the single layout match
        RETURN QUERY SELECT mimic_name, object_name, object_instance_name
                         FROM layout_match
                         LIMIT 1;
    ELSIF match_count > 1 THEN
        -- Set flag for layout filtering if multiple layout matches found
        layout_filter := TRUE;
    END IF;

    -- Step 3: Use similarity scoring with optional layout filtering
    RETURN QUERY
        WITH similarity_matches AS (
                                       SELECT
                                           mimic_name,
                                           object_name,
                                           object_instance_name,
                                           GREATEST(
                                                   COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                                 FROM unnest(works_parts) AS part), 0)
                                           ) AS score
                                           FROM mimic_usage_data
                                           WHERE
                                               (other_value = db_address OR db_addr = db_address)
                                               AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                               AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                                   )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM similarity_matches
            WHERE score > 0.0  -- Only include matches with a positive similarity score
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    WITH filtered_data AS (
                              SELECT mimic_name, object_name, object_instance_name
                                  FROM mimic_usage_data
                                  WHERE
                                      (other_value = db_address OR db_addr = db_address)
                                      AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                          )
    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        RETURN QUERY
            WITH filtered_data AS (
                                      SELECT mimic_name, object_name, object_instance_name
                                          FROM mimic_usage_data
                                          WHERE
                                              (other_value = db_address OR db_addr = db_address)
                                              AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                  )
            SELECT mimic_name, object_name, object_instance_name
                FROM filtered_data
                LIMIT 1;
    ELSIF match_count < 1 THEN
        RETURN;  -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        RETURN QUERY
            SELECT mimic_name, object_name, object_instance_name
                FROM mimic_usage_data
                WHERE
                    (other_value = db_address OR db_addr = db_address)
                    AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                    AND LOWER(object_name) = 'layout'
                LIMIT 1;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
    RETURN QUERY
        WITH mimic_matches AS (
                                  SELECT
                                      mimic_name,
                                      object_name,
                                      object_instance_name,
                                      GREATEST(
                                              COALESCE((SELECT MAX(similarity(mimic_name, part))
                                                            FROM unnest(works_parts) AS part), 0)
                                      ) AS score
                                      FROM mimic_usage_data
                                      WHERE
                                          (other_value = db_address OR db_addr = db_address)
                                          AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                          AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                              )
        SELECT mimic_name AS mi_name, object_name AS mi_object_name, object_instance_name AS mi_object_instance
            FROM mimic_matches
            WHERE score > 0.0  -- Include only matches with a similarity score greater than 0
            ORDER BY score DESC, LENGTH(mimic_name) ASC
            LIMIT 1;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             LIMIT 100
                     ),

        mimic_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                             LIMIT 100
                     ),

        process_cte AS (
                           SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                               LIMIT 100
                       ),

        function_cte AS (
                            SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                                LIMIT 100
                        ),

        asset_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                             LIMIT 100
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 100;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             LIMIT 500
                     ),

        mimic_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                             LIMIT 500
                     ),

        process_cte AS (
                           SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                               LIMIT 500
                       ),

        function_cte AS (
                            SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                                LIMIT 500
                        ),

        asset_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                             LIMIT 500
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 500;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    return next;


    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    WITH
        filtered_data AS (
                             SELECT mimic_name, object_name, object_instance_name
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                         )


    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        WITH
            filtered_data AS (
                                 SELECT mimic_name, object_name, object_instance_name
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                             )
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM filtered_data
            LIMIT 1;
        RETURN NEXT;


    ELSIF match_count < 1 THEN
        RETURN; -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                AND LOWER(object_name) = 'layout'
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
    WITH
        mimic_matches AS (
                             SELECT
                                 mimic_name,
                                 object_name,
                                 object_instance_name,
                                 GREATEST(
                                         COALESCE((
                                                      SELECT MAX(similarity(mimic_name, part))
                                                          FROM UNNEST(works_parts) AS part
                                                  ), 0)
                                 ) AS score
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                     AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                         )
    SELECT mimic_name, object_name, object_instance_name
        INTO mi_name, mi_object_name, mi_object_instance
        FROM mimic_matches
        WHERE score > 0.0 -- Include only matches with a similarity score greater than 0
        ORDER BY score DESC, LENGTH(mimic_name) ASC
        LIMIT 1;
    RETURN NEXT;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);


    SELECT mimic_name, object_name, object_instance_name
        into mi_name, mi_object_name, mi_object_instance
            from mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
    return next;


    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    WITH
        filtered_data AS (
                             SELECT mimic_name, object_name, object_instance_name
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                         )


    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        WITH
            filtered_data AS (
                                 SELECT mimic_name, object_name, object_instance_name
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                             )
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM filtered_data
            LIMIT 1;
        RETURN NEXT;


    ELSIF match_count < 1 THEN
        RETURN; -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                AND LOWER(object_name) = 'layout'
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
    WITH
        mimic_matches AS (
                             SELECT
                                 mimic_name,
                                 object_name,
                                 object_instance_name,
                                 GREATEST(
                                         COALESCE((
                                                      SELECT MAX(similarity(mimic_name, part))
                                                          FROM UNNEST(works_parts) AS part
                                                  ), 0)
                                 ) AS score
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                     AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                         )
    SELECT mimic_name, object_name, object_instance_name
        INTO mi_name, mi_object_name, mi_object_instance
        FROM mimic_matches
        WHERE score > 0.0 -- Include only matches with a similarity score greater than 0
        ORDER BY score DESC, LENGTH(mimic_name) ASC
        LIMIT 1;
    RETURN NEXT;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);


    SELECT mimic_name, object_name, object_instance_name
        into mi_name, mi_object_name, mi_object_instance
            from mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;
    return next;


    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    WITH
        filtered_data AS (
                             SELECT mimic_name, object_name, object_instance_name
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                         )


    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        WITH
            filtered_data AS (
                                 SELECT mimic_name, object_name, object_instance_name
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                             )
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM filtered_data
            LIMIT 1;
        RETURN NEXT;


    ELSIF match_count < 1 THEN
        RETURN; -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                AND LOWER(object_name) = 'layout'
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
    WITH
        mimic_matches AS (
                             SELECT
                                 mimic_name,
                                 object_name,
                                 object_instance_name,
                                 GREATEST(
                                         COALESCE((
                                                      SELECT MAX(similarity(mimic_name, part))
                                                          FROM UNNEST(works_parts) AS part
                                                  ), 0)
                                 ) AS score
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                     AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                         )
    SELECT mimic_name, object_name, object_instance_name
        INTO mi_name, mi_object_name, mi_object_instance
        FROM mimic_matches
        WHERE score > 0.0 -- Include only matches with a similarity score greater than 0
        ORDER BY score DESC, LENGTH(mimic_name) ASC
        LIMIT 1;
    RETURN NEXT;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        mimic_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);


    SELECT mimic_name, object_name, object_instance_name
        into mi_name, mi_object_name, mi_object_instance
            from mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;
    return next;

    end;
    $$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
--     works_parts TEXT[];
--     match_count INTEGER;
--     layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);


    SELECT mimic_name, object_name, object_instance_name
        into mi_name, mi_object_name, mi_object_instance
            from mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;
    return next;

    end;
    $$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF point_name LIKE '%dosing%' OR
        point_name LIKE '%cl2%'
    THEN
        process := 'Dosing';
    END IF;

    IF point_name LIKE '%sodium hypo%' THEN
        process := 'Dosing';
    END IF;

    IF point_name LIKE '%chlorine%' THEN
        process := 'Dosing';
    END IF;

    IF mimic_name ~* 'ortho|sodium|phosphoric' OR os_name ~* 'ortho|sodium|phosphoric' THEN
        process := 'Dosing';
    END IF;

    IF mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%'
            OR os_name LIKE '%chemical%' OR os_name LIKE '%dosing%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Dosing';
    END IF;

    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    IF mimic_name LIKE '%inlet%' OR os_name LIKE '%inlet%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    IF mimic_name LIKE '%booster%' OR os_name LIKE '%booster%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    IF mimic_name LIKE '%boreholes%' OR os_name LIKE '%boreholes%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;


    -- todo think this should be if point_name like '%tank%' as well
    -- Filters                              only examples I found were 'covered_res'
    IF object_name = 'tank' OR object_name LIKE '%res%' OR object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- SITE SITE SITE SITE SITE
    -- SITE takes priority over sps stw etc
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR

        -- todo guessing this is correct cos Brandon wanted one by the name of OSTN WATCHDOG to be site
        point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog process%'
    THEN
        process := 'Site';
    END IF;

    IF object_name = 'filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;


    -- only set process as sps wtw stw if process isn't already set to Site, SITE takes priority
    -- THINK THIS
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR os_name LIKE '%sps%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%wtw%' OR os_name LIKE '%wtw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF mimic_name LIKE '%stw%' OR os_name LIKE '%stw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF os_name LIKE '%PS%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF point_name LIKE '%dosing%' OR
        point_name LIKE '%cl2%'
    THEN
        process := 'Dosing';
    END IF;

    IF point_name LIKE '%sodium hypo%' THEN
        process := 'Dosing';
    END IF;

    IF point_name LIKE '%chlorine%' THEN
        process := 'Dosing';
    END IF;

    IF mimic_name ~* 'ortho|sodium|phosphoric' OR os_name ~* 'ortho|sodium|phosphoric' THEN
        process := 'Dosing';
    END IF;

    IF mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%'
            OR os_name LIKE '%chemical%' OR os_name LIKE '%dosing%' THEN
        process := 'Dosing';
    END IF;

    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    IF mimic_name LIKE '%inlet%' OR os_name LIKE '%inlet%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    IF mimic_name LIKE '%booster%' OR os_name LIKE '%booster%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    IF mimic_name LIKE '%boreholes%' OR os_name LIKE '%boreholes%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;


    -- todo think this should be if point_name like '%tank%' as well
    -- Filters                              only examples I found were 'covered_res'
    IF object_name = 'tank' OR object_name LIKE '%res%' OR object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- SITE SITE SITE SITE SITE
    -- SITE takes priority over sps stw etc
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR

        -- todo guessing this is correct cos Brandon wanted one by the name of OSTN WATCHDOG to be site
        point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog process%'
    THEN
        process := 'Site';
    END IF;

    IF object_name = 'filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;


    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR os_name LIKE '%sps%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%wtw%' OR os_name LIKE '%wtw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF mimic_name LIKE '%stw%' OR os_name LIKE '%stw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF os_name LIKE '%PS%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
BEGIN
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('pump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name LIKE '%conical_res%' OR object_name LIKE '%covered_res%'
            OR object_name LIKE '%res_diagnostic_grid%' OR object_name LIKE '%reservoir_grid%'
            OR object_name LIKE '%reservoirs_grid%' OR object_name LIKE '%reservoir_symbols_grid%'
            OR object_name LIKE '%res_level%' OR object_name LIKE '%res_security_grid"%'
            OR object_name LIKE '%res_security_table%' OR object_name LIKE '%res_sites_grid%'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- todo - NUMERICAL and ALPHANUMERICAL IDENTIFIERS
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || pump_num);
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    -- todo - NUMERICAL and ALPHANUMERICAL IDENTIFIERS
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || pump_num);
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - does he mean 'analog_value' literally?
    -- ANALOG VALUE IS THE OBJECT_INSTANCE
    -- dbname contains flow or acronyms & object_name is analog_value(?)
    -- todo - if dbname contains word flow or acronyms & object_name is not analog_value, asset = Flow
    -- so the same thing then.. ?
    IF point_name LIKE '%flow%'
        -- todo -> forget about object name for nowww
        -- AND object_name = 'analog_value'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    -- todo - same thing with the analogue value stuff idk what that is
    -- also 'or acronyms' ???
    IF point_name LIKE '%pressure%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF point_name LIKE '%turbidity%'
        -- todo -> forget about object_name for now :)
        -- AND object_name = 'analog_value'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'FIRMWARE VERSION';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR point_name LIKE '%valve%' or object_name LIKE '%valve%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
BEGIN
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('pump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name LIKE '%conical_res%' OR object_name LIKE '%covered_res%'
            OR object_name LIKE '%res_diagnostic_grid%' OR object_name LIKE '%reservoir_grid%'
            OR object_name LIKE '%reservoirs_grid%' OR object_name LIKE '%reservoir_symbols_grid%'
            OR object_name LIKE '%res_level%' OR object_name LIKE '%res_security_grid"%'
            OR object_name LIKE '%res_security_table%' OR object_name LIKE '%res_sites_grid%'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- THIS NEEDS CHANGING WHEN MIMICS START GETTING MATCHED PROPERLY ^^^^^^ ############
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        if asset is not null and asset <> 'Tank' then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || pump_num);
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    -- todo - NUMERICAL and ALPHANUMERICAL IDENTIFIERS
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || pump_num);
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - does he mean 'analog_value' literally?
    -- ANALOG VALUE IS THE OBJECT_INSTANCE
    -- dbname contains flow or acronyms & object_name is analog_value(?)
    -- todo - if dbname contains word flow or acronyms & object_name is not analog_value, asset = Flow
    -- so the same thing then.. ?
    IF point_name LIKE '%flow%'
        -- todo -> forget about object name for nowww
        -- AND object_name = 'analog_value'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    -- todo - same thing with the analogue value stuff idk what that is
    -- also 'or acronyms' ???
    IF point_name LIKE '%pressure%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF point_name LIKE '%turbidity%'
        -- todo -> forget about object_name for now :)
        -- AND object_name = 'analog_value'
    THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'FIRMWARE VERSION';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'Site' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR point_name LIKE '%valve%' or object_name LIKE '%valve%' THEN
        if asset is not null then
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';


    IF process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%' THEN
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%' THEN
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%' THEN
        function := 'Hypochlorite';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';


            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP
            -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump
            -- this might work idk though

            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name = 'sump' OR point_name LIKE '%sump%'
    THEN
        IF function IS NULL OR function <> 'Pump Set' and function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name = 'reservoir' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Generator
    IF object_name = 'generator' OR point_name LIKE '%generator%' OR point_name LIKE '%gen%' THEN
        IF function IS NOT NULL and function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site
--     if point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%power status flag%' OR point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR point_name LIKE '%ostn battery charge%' OR -- second one isnt needed
        point_name LIKE '%backup battery%' THEN
        IF function IS NOT NULL and function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- more site
    IF point_name LIKE '%ostn watchdog%' OR point_name LIKE '%plc watchdog%' OR point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3
    --                                                  says 'telemetry function' but I disagree
    IF point_name LIKE '%site communications%' OR point_name LIKE '%telemetry%'
            OR point_name LIKE '%signal strength%' OR point_name LIKE '%comms%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    IF point_name LIKE '%busbar%' THEN
        IF function IS NOT NULL and function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;


    -- Vents
    --              'But no chemical identifier such as cl2 / ortho
    IF point_name LIKE '%ventilation fan%'
    THEN
        function := 'heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%'
    THEN
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%'
    THEN
        function := 'Orthophosphoric';
    END IF;


    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    IF point_name LIKE '%filter%' AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        function := 'Water Quality';
    END IF;


    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;


    -- Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'Sewage Treatment Works'
    THEN
        function := 'Aeration';
    END IF;


    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%'
    THEN
        function := ' Waste';
    END IF;

    -- Water Quality todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        function := 'Water Quality';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
--     works_parts TEXT[];
--     match_count INTEGER;
--     layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);


    SELECT mimic_name, object_name, object_instance_name
        into mi_name, mi_object_name, mi_object_instance
            from mimic_usage_data
        WHERE
            other_value = db_address
--             (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;
    return next;

    end;
    $$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR os_name LIKE '%inlet%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    IF mimic_name LIKE '%boreholes%' THEN -- removed check in os_name for boreholes
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' THEN -- removed check in os_name for booster
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;


    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR

        -- not sure if this should be here???
        point_name LIKE '%mains supply%' OR

        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        process := 'Site';
    END IF;

    -- todo think this should be if point_name like '%tank%' as well
    -- Reservoirs
    IF object_name = 'tank' OR
        object_name LIKE '%res%' OR
        -- Sump
        object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;


    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR os_name LIKE '%sps%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%wtw%' OR os_name LIKE '%wtw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF mimic_name LIKE '%stw%' OR os_name LIKE '%stw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF os_name LIKE '%PS%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR os_name LIKE '%inlet%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    IF mimic_name LIKE '%boreholes%' THEN -- removed check in os_name for boreholes
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' THEN -- removed check in os_name for booster
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;


    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR

        -- not sure if this should be here???
--         point_name LIKE '%mains supply%' OR

        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        process := 'Site';
    END IF;

    -- todo think this should be if point_name like '%tank%' as well
    -- Reservoirs
    IF object_name = 'tank' OR
        object_name LIKE '%res%' OR
        -- Sump
        object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;


    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR os_name LIKE '%sps%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%wtw%' OR os_name LIKE '%wtw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF mimic_name LIKE '%stw%' OR os_name LIKE '%stw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF os_name LIKE '%PS%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR os_name LIKE '%inlet%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    IF mimic_name LIKE '%boreholes%' THEN -- removed check in os_name for boreholes
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' THEN -- removed check in os_name for booster
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;


    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR
        point_name LIKE '%mains supply%' OR

        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        process := 'Site';
    END IF;

    -- todo think this should be if point_name like '%tank%' as well
    -- Reservoirs
    IF object_name = 'tank' OR
        object_name LIKE '%res%' OR
        -- Sump
        object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;


    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR os_name LIKE '%sps%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%wtw%' OR os_name LIKE '%wtw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF mimic_name LIKE '%stw%' OR os_name LIKE '%stw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF os_name LIKE '%PS%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR os_name LIKE '%inlet%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    IF mimic_name LIKE '%boreholes%' THEN -- removed check in os_name for boreholes
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Pump
    IF point_name LIKE '%borehole%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' THEN -- removed check in os_name for booster
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- Pump
    IF point_name LIKE '%booster%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR
        point_name LIKE '%mains supply%' OR
        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        process := 'Site';
    END IF;

    -- Reservoirs
    -- todo think this should be if point_name like '%tank%' as well
    IF object_name = 'tank' OR
        object_name LIKE '%res%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL and process <> 'Storage' THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR -- think this should be a LIKE cos there is 'bio_filter'
        object_name = 'bio_filter' OR
        object_name = 'sand_filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;


    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR os_name LIKE '%sps%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%stw%' OR os_name LIKE '%stw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF mimic_name LIKE '%wtw%' OR os_name LIKE '%wtw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF os_name LIKE '%PS%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';


    -- don't think the bracket part is needed cos thats how dosing process is made
    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';


            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP
            -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump
            -- this might work idk though

            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%mains supply%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Power
    IF point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Vents
    --              'But no chemical identifier such as cl2 / ortho ????
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%' AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;

    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    IF point_name LIKE '%tank security%' AND process = 'Water Treatment Works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'Sewage Treatment Works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;


    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;


    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := "".fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';


    -- don't think the bracket part is needed cos thats how dosing process is made
    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';


            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP
            -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump
            -- this might work idk though

            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%mains supply%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Power
    IF point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Vents
    --              'But no chemical identifier such as cl2 / ortho ????
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%' AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;

    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    IF point_name LIKE '%tank security%' AND process = 'Water Treatment Works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'Sewage Treatment Works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;


    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;


    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                       --                                            ON (pn.server_name = mu.nexus AND pn.db_addr = mu.db_addr)
                                       --                                            Forfeit the server check cos its always empty
                                           ON (pn.db_addr = mu.other_value)
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                       --                                            ON (pn.server_name = mu.nexus AND pn.db_addr = mu.db_addr)
                                       --                                            Forfeit the server check cos its always empty
                                           ON (pn.db_addr = mu.other_value and server_name like mu.mimic_name || '%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
BEGIN
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('pump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL AND asset <> 'Tank' THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || pump_num);
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    -- todo - NUMERICAL and ALPHANUMERICAL IDENTIFIERS
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || pump_num);
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - does he mean 'analog_value' literally?
    -- ANALOG VALUE IS THE OBJECT_INSTANCE
    -- dbname contains flow or acronyms & object_name is analog_value(?)
    -- todo - if dbname contains word flow or acronyms & object_name is not analog_value, asset = Flow
    -- so the same thing then.. ?
    IF point_name LIKE '%flow%'
        -- todo -> forget about object name for nowww
        -- AND object_name = 'analog_value'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    -- todo - same thing with the analogue value stuff idk what that is
    -- also 'or acronyms' ???
    IF point_name LIKE '%pressure%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF point_name LIKE '%turbidity%'
        -- todo -> forget about object_name for now :)
        -- AND object_name = 'analog_value'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR point_name LIKE '%valve%' OR object_name LIKE '%valve%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
BEGIN
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('pump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL AND asset <> 'Tank' THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || pump_num);
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - does he mean 'analog_value' literally?
    -- ANALOG VALUE IS THE OBJECT_INSTANCE
    -- dbname contains flow or acronyms & object_name is analog_value(?)
    -- todo - if dbname contains word flow or acronyms & object_name is not analog_value, asset = Flow
    -- so the same thing then.. ?
    IF point_name LIKE '%flow%'
        -- todo -> forget about object name for nowww
        -- AND object_name = 'analog_value'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    -- todo - same thing with the analogue value stuff idk what that is
    -- also 'or acronyms' ???
    IF point_name LIKE '%pressure%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF point_name LIKE '%turbidity%'
        -- todo -> forget about object_name for now :)
        -- AND object_name = 'analog_value'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR point_name LIKE '%valve%' OR object_name LIKE '%valve%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
BEGIN
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('pump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL AND asset <> 'Tank' THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - does he mean 'analog_value' literally?
    -- ANALOG VALUE IS THE OBJECT_INSTANCE
    -- dbname contains flow or acronyms & object_name is analog_value(?)
    -- todo - if dbname contains word flow or acronyms & object_name is not analog_value, asset = Flow
    -- so the same thing then.. ?
    IF point_name LIKE '%flow%'
        -- todo -> forget about object name for nowww
        -- AND object_name = 'analog_value'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    -- todo - same thing with the analogue value stuff idk what that is
    -- also 'or acronyms' ???
    IF point_name LIKE '%pressure%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF point_name LIKE '%turbidity%'
        -- todo -> forget about object_name for now :)
        -- AND object_name = 'analog_value'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR point_name LIKE '%valve%' OR object_name LIKE '%valve%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
BEGIN
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('pump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL AND asset <> 'Tank' THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'Site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%' OR
        object_name LIKE '%valve%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR os_name LIKE '%inlet%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    IF mimic_name LIKE '%boreholes%' THEN -- removed check in os_name for boreholes
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Pump
    IF point_name LIKE '%borehole%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' THEN -- removed check in os_name for booster
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- Pump
    IF point_name LIKE '%booster%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR
        point_name LIKE '%mains supply%' OR
        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%' OR
        -- #
        point_name LIKE '%security%' or
        point_name LIKE '%intruder%'
    THEN
        process := 'Site';
    END IF;

    -- Reservoirs
    -- todo think this should be if point_name like '%tank%' as well
    IF object_name = 'tank' OR
        object_name LIKE '%res%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL and process <> 'Storage' THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR -- think this should be a LIKE cos there is 'bio_filter'
        object_name = 'bio_filter' OR
        object_name = 'sand_filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;


    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR os_name LIKE '%sps%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%stw%' OR os_name LIKE '%stw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF mimic_name LIKE '%wtw%' OR os_name LIKE '%wtw%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF os_name LIKE '%PS%' THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';


            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP
            -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump
            -- this might work idk though

            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%mains supply%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Power
    IF point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Vents
    --              'But no chemical identifier such as cl2 / ortho ????
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%' AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;

    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;


    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;


    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('pump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL AND asset <> 'Tank' THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%' OR
        object_name LIKE '%valve%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%mains supply%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Power
    IF point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Vents
    --              'But no chemical identifier such as cl2 / ortho ????
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%' AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;

    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;


    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;


    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    -- todo - this will overwrite above :D
    IF point_name LIKE '%balance tank' OR
        point_name LIKE '%balancing tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
        AND
    (process = 'water treatment works' or process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- Reservoir (again)
    if (point_name like '%reservoir' or point_name like '%res%') and process = 'storage'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Reservoir';
    END IF;


    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%mains supply%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%intruder%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Power
    IF point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Vents
    --              'But no chemical identifier such as cl2 / ortho ????
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%' AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;

    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;


    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;


    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    -- todo - this will overwrite above :D
    IF point_name LIKE '%balance tank' OR
        point_name LIKE '%balancing tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
            AND
        (process = 'water treatment works' OR process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- Reservoir (again)
    IF (point_name LIKE '%reservoir' OR point_name LIKE '%res%') AND process = 'storage'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;


    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Reservoir (again)
    IF (point_name LIKE '%reservoir' OR point_name LIKE '%res%') AND process = 'storage'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;



    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site -> Power
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL AND function <> 'Power' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%intruder%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Vents
    -- 'But no chemical identifier such as cl2/ortho', so just this?
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%'
            AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2
    IF (point_name LIKE '%raw wtr ph%' OR
        point_name LIKE '%raw ph%' OR
        point_name LIKE '%ph%' OR
        point_name LIKE '%raw wtr turbidity%' OR
        point_name LIKE '%raw wtr turb%' OR
        point_name LIKE '%turbidity%' OR
        point_name LIKE '%raw wtr samp%' OR
        point_name LIKE '%raw water quality monitors%')
            AND
        (process = 'abstraction')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #3 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;


    -- Scraper - No answer given yet
    IF point_name LIKE '%scraper'
            AND
        (process = 'sewage treatment works' OR process = 'sewage pumping station')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Scraper(?)';
    END IF;

    -- Sedimentation
    IF (point_name LIKE '%sedimentation tank' AND process = 'sewage treatment works')
            OR
        (point_name LIKE '%sediment tank%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Sedimentation';
    END IF;


    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    -- NEED os_name ( NOOOOOOOO D:   )
    IF point_name LIKE '%contact tank%' AND process = 'water treatment works' -- and os_name like '%security%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;


    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        -- can do and function <> 'Security' but there's other security like ostn watchdog stuffs
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;

    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%storm tank%' OR
        point_name LIKE '%storm storage tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;

    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    -- todo - this will overwrite above :D
    IF point_name LIKE '%balance tank' OR -- todo - this will overwrite above
        point_name LIKE '%balancing tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
            AND
        (process = 'water treatment works' OR process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR
        os_name LIKE '%inlet%' OR
        mimic_name LIKE '%boreholes%' OR
        os_name LIKE '%boreholes%' OR
        point_name LIKE '%borehole%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' OR
        os_name LIKE '%booster%' OR
        point_name LIKE '%booster%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR
        point_name LIKE '%security%' OR
        point_name LIKE '%intruder%' OR
        point_name LIKE '%mains supply%' OR
        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        process := 'Site';
    END IF;

    -- Reservoirs
    -- todo think this should be if point_name like '%tank%' as well
    IF object_name LIKE '%tank%' OR
        object_name LIKE '%res_%' OR
        object_name LIKE '%_res%' -- I think this works?
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL AND process <> 'Storage' THEN -- cant remember why this is here - think it was overwriting with the same process?
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR -- think this should be a LIKE cos there is 'bio_filter'
        object_name = 'bio_filter' OR
        object_name = 'sand_filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;

    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR
                os_name LIKE '%sps%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%stw%' OR
                os_name LIKE '%stw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF mimic_name LIKE '%wtw%' OR
                os_name LIKE '%wtw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF os_name LIKE '%ps%' -- this is gonna mess everything up :D
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR
        os_name LIKE '%inlet%' OR
        mimic_name LIKE '%boreholes%' OR
        os_name LIKE '%boreholes%' OR
        point_name LIKE '%borehole%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' OR
        os_name LIKE '%booster%' OR
        point_name LIKE '%booster%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR
        point_name LIKE '%security%' OR
        point_name LIKE '%intruder%' OR
        point_name LIKE '%mains supply%' OR
        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        process := 'Site';
    END IF;

    -- Reservoirs
    -- todo think this should be if point_name like '%tank%' as well
    IF object_name LIKE '%tank%' OR
        object_name LIKE '%res_%' OR
        object_name LIKE '%_res%' -- I think this works?
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL AND process <> 'Storage' THEN -- cant remember why this is here - think it was overwriting with the same process?
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR -- think this should be a LIKE cos there is 'bio_filter'
        object_name = 'bio_filter' OR
        object_name = 'sand_filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        process := 'Filtration';
    END IF;

    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR
                os_name LIKE '%sps%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%stw%' OR
                os_name LIKE '%stw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF mimic_name LIKE '%wtw%' OR
                os_name LIKE '%wtw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF os_name LIKE '%ps%' and process <> 'Sewage Pumping Station'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR point_name LIKE '%pmp%'
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + length(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL AND asset <> 'Tank' THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR object_name LIKE '%generator%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%' OR
        object_name LIKE '%valve%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%' OR
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
        object_name LIKE '%valve%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered
    IF point_name LIKE '%vlv%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('vlv' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 3));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Valve ' || pump_num);
            ELSE
                asset := 'Valve';
            END IF;
        END IF;
    END IF;


    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
select
    point_name from
    pnp_point_names
        WHERE point_name like '\yMON\y';
;-- -. . -..- - / . -. - .-. -.--
select * from
    pnp_point_names
        WHERE point_name like '\yMON\y';
;-- -. . -..- - / . -. - .-. -.--
select * from
    pnp_point_names as pn
        WHERE pn.point_name like '\yMON\y';
;-- -. . -..- - / . -. - .-. -.--
select * from
    pnp_point_names as pn
        WHERE pn.point_name ~* '\yMON\y';
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%' OR
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
        object_name LIKE '%valve%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('vlv' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 3));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Valve ' || pump_num);
            ELSE
                asset := 'Valve';
            END IF;
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Compressor ' || pump_num);
            ELSE
                asset := 'Compressor';
            END IF;
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('UV Reactor ' || pump_num);
            ELSE
                asset := 'UV Reactor';
            END IF;
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%' OR
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
        object_name LIKE '%valve%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('vlv' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 3));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Compressor ' || pump_num);
            ELSE
                asset := 'Compressor';
            END IF;
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('UV Reactor ' || pump_num);
            ELSE
                asset := 'UV Reactor';
            END IF;
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%' OR
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
        object_name LIKE '%valve%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('vlv' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 3));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('UV Reactor ' || pump_num);
            ELSE
                asset := 'UV Reactor';
            END IF;
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Reservoir (again)
    IF (point_name LIKE '%reservoir' OR point_name LIKE '%res%') AND process = 'storage'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;



    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site -> Power
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%intruder%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Vents
    -- 'But no chemical identifier such as cl2/ortho', so just this?
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%'
            AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2
    IF (point_name LIKE '%raw wtr ph%' OR
        point_name LIKE '%raw ph%' OR
        point_name LIKE '%ph%' OR
        point_name LIKE '%raw wtr turbidity%' OR
        point_name LIKE '%raw wtr turb%' OR
        point_name LIKE '%turbidity%' OR
        point_name LIKE '%raw wtr samp%' OR
        point_name LIKE '%raw water quality monitors%')
            AND
        (process = 'abstraction')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #3 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;


    -- Scraper - No answer given yet
    IF point_name LIKE '%scraper'
            AND
        (process = 'sewage treatment works' OR process = 'sewage pumping station')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Scraper(?)';
    END IF;

    -- Sedimentation
    IF (point_name LIKE '%sedimentation tank' AND process = 'sewage treatment works')
            OR
        (point_name LIKE '%sediment tank%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Sedimentation';
    END IF;


    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    -- NEED os_name ( NOOOOOOOO D:   )
    IF point_name LIKE '%contact tank%' AND process = 'water treatment works' -- and os_name like '%security%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;


    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        -- can do and function <> 'Security' but there's other security like ostn watchdog stuffs
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;

    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%storm tank%' OR
        point_name LIKE '%storm storage tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;

    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    -- todo - this will overwrite above :D
    IF point_name LIKE '%balance tank' OR -- todo - this will overwrite above
        point_name LIKE '%balancing tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
            AND
        (process = 'water treatment works' OR process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR
        os_name LIKE '%inlet%' OR
        mimic_name LIKE '%boreholes%' OR
        os_name LIKE '%boreholes%' OR
        point_name LIKE '%borehole%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' OR
        os_name LIKE '%booster%' OR
        point_name LIKE '%booster%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR
        point_name LIKE '%security%' OR
        point_name LIKE '%intruder%' OR
        point_name LIKE '%mains supply%' OR
        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Site';
    END IF;

    -- Reservoirs
    -- todo think this should be if point_name like '%tank%' as well
    IF object_name LIKE '%tank%' OR
        object_name LIKE '%res_%' OR
        object_name LIKE '%_res%' -- I think this works?
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL THEN -- cant remember why this is here - think it was overwriting with the same process? AND process <> 'Storage'
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR -- think this should be a LIKE cos there is 'bio_filter'
        object_name = 'bio_filter' OR
        object_name = 'sand_filter' OR
        point_name LIKE '%filter%' OR
        point_name LIKE '%filtration%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Filtration';
    END IF;

    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR
                os_name LIKE '%sps%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%stw%' OR
                os_name LIKE '%stw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF mimic_name LIKE '%wtw%' OR
                os_name LIKE '%wtw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF os_name LIKE '%ps%' and process <> 'Sewage Pumping Station' -- not sure but guessing check for this
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                       --                                            ON (pn.server_name = mu.nexus AND pn.db_addr = mu.db_addr)
                                       --                                            Forfeit the server check cos its always empty
                                           ON (pn.db_addr = mu.other_value and server_name like SPLIT_PART(mimic_name, '_', 1))
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
SELECT * from pnp_point_hierarchy_view
where
    process_overwritten = '' and
    function_overwritten = '' and
    asset_overwritten = '' AND
    process <> 'Unknown' AND
    function <> 'Unknown' AND
    asset <> 'Unknown';
;-- -. . -..- - / . -. - .-. -.--
CREATE EXTENSION IF NOT EXISTS pg_trgm;
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_server_index ON mimic_usage_data (SPLIT_PART(mimic_name, '_', 1));
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_other_value ON mimic_usage_data (other_value);
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_composite_db_other ON mimic_usage_data (other_value, db_addr);
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_server_other_combined ON mimic_usage_data (other_value, SPLIT_PART(mimic_name, '_', 1));
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_object_name_lower ON mimic_usage_data (LOWER(object_name));
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_db_other_layout ON mimic_usage_data (other_value, db_addr, LOWER(object_name));
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_score ON mimic_usage_data (other_value, db_addr, SPLIT_PART(mimic_name, '_', 1));
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_usage_mimic_name ON mimic_usage_data (mimic_name);
;-- -. . -..- - / . -. - .-. -.--
CREATE INDEX pnp_mimic_name_gin ON mimic_usage_data USING GIN (mimic_name gin_trgm_ops);
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
--     works_parts TEXT[];
--     match_count INTEGER;
--     layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    SELECT mimic_name, object_name, object_instance_name
        into mi_name, mi_object_name, mi_object_instance
            from mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;
    return next;



    end;
    $$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
--                              SELECT
                         SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
--                            SELECT
                           SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
--                             SELECT
                            SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
--                          SELECT
                         SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
--     works_parts TEXT[];
--     match_count INTEGER;
--     layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    SELECT mimic_name, object_name, object_instance_name
        into mi_name, mi_object_name, mi_object_instance
            from mimic_usage_data
        WHERE
            other_value = db_address
--             (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;
    return next;



    end;
    $$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                             SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    works_parts TEXT[];
    match_count INTEGER;
    layout_filter BOOLEAN := FALSE;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Split `works` by spaces for matching
    works_parts := STRING_TO_ARRAY(works, ' ');

    -- Count matches directly into `match_count`
    WITH
        filtered_data AS (
                             SELECT mimic_name, object_name, object_instance_name
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                         )


    SELECT COUNT(*)
        INTO match_count
        FROM filtered_data;

    -- Handle single match case
    IF match_count = 1 THEN
        WITH
            filtered_data AS (
                                 SELECT mimic_name, object_name, object_instance_name
                                     FROM mimic_usage_data
                                     WHERE
                                         (other_value = db_address OR db_addr = db_address)
                                         AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                             )
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM filtered_data
            LIMIT 1;
        RETURN NEXT;


    ELSIF match_count < 1 THEN
        RETURN; -- No matches found
    END IF;

    -- Count layout matches if necessary
    SELECT COUNT(*)
        INTO match_count
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
            AND LOWER(object_name) = 'layout';

    IF match_count = 1 THEN
        SELECT mimic_name, object_name, object_instance_name
            INTO mi_name, mi_object_name, mi_object_instance
            FROM mimic_usage_data
            WHERE
                (other_value = db_address OR db_addr = db_address)
                AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                AND LOWER(object_name) = 'layout'
            LIMIT 1;
        RETURN NEXT;
    END IF;

    -- Set layout_filter if needed
    IF match_count > 1 THEN
        layout_filter := TRUE;
    END IF;

    -- Use a CTE to score mimic names
    WITH
        mimic_matches AS (
                             SELECT
                                 mimic_name,
                                 object_name,
                                 object_instance_name,
                                 GREATEST(
                                         COALESCE((
                                                      SELECT MAX(similarity(mimic_name, part))
                                                          FROM UNNEST(works_parts) AS part
                                                  ), 0)
                                 ) AS score
                                 FROM mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                     AND (NOT layout_filter OR LOWER(object_name) = 'layout')
                         )
    SELECT mimic_name, object_name, object_instance_name
        INTO mi_name, mi_object_name, mi_object_instance
        FROM mimic_matches
        WHERE score > 0.0 -- Include only matches with a similarity score greater than 0
        ORDER BY score DESC, LENGTH(mimic_name) ASC
        LIMIT 1;
    RETURN NEXT;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE TEMP TABLE first_select
        (
            mimic_name TEXT,
            mimic_object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;
;-- -. . -..- - / . -. - .-. -.--
-- Take 2 :)
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    match_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- First table to hold first select
    CREATE TEMP TABLE first_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- First selection
    -- Match the given db_address to the other_value and db_addr
    -- and the correct server with first part of mimic_name
    INSERT
        INTO
            first_select(
                            mimic_name, object_name, mimic_object_instance
                        )
    SELECT mimic_name, object_name, object_instance_name
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- count first_selection
    SELECT COUNT(*)
        INTO match_count
        FROM first_select;

    -- if 1 or 0 return next, else go on to next select
    IF match_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM first_select;
    END IF;
    -- ### End of 1st


    -- Second table to hold second select
    CREATE TEMP TABLE second_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- second selection
    -- Try to find a match that is layout_object
    INSERT
        INTO
            second_select(
                             mimic_name, object_name, mimic_object_instance
                         )
    SELECT mimic_name, object_name, mimic_object_instance
        FROM first_select
        WHERE
            LOWER(first_select.object_name) LIKE '%layout%';

    -- count second_selection
    SELECT COUNT(*)
        INTO match_count
        FROM second_select;

    -- if 1 or 0 return next, else go on to third_select
    IF match_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM second_select;
    END IF;
    -- ### End of 2nd


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
-- Take 2 :)
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
    SECURITY INVOKER
AS
$$
DECLARE
    match_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- First table to hold first select
    CREATE TEMP TABLE first_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- First selection
    -- Match the given db_address to the other_value and db_addr
    -- and the correct server with first part of mimic_name
    INSERT
        INTO
            first_select(
                            mimic_name, object_name, mimic_object_instance
                        )
    SELECT mimic_name, object_name, object_instance_name
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- count first_selection
    SELECT COUNT(*)
        INTO match_count
        FROM first_select;

    -- if 1 or 0 return next, else go on to next select
    IF match_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM first_select;
    END IF;
    -- ### End of 1st


    -- Second table to hold second select
    CREATE TEMP TABLE second_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- second selection
    -- Try to find a match that is layout_object
    INSERT
        INTO
            second_select(
                             mimic_name, object_name, mimic_object_instance
                         )
    SELECT mimic_name, object_name, mimic_object_instance
        FROM first_select
        WHERE
            LOWER(first_select.object_name) LIKE '%layout%';

    -- count second_selection
    SELECT COUNT(*)
        INTO match_count
        FROM second_select;

    -- if 1 or 0 return next, else go on to third_select
    IF match_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM second_select;
    END IF;
    -- ### End of 2nd


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic(
                                                db_address TEXT, works TEXT, server TEXT
                                            ) RETURNS TABLE (
                                                                mi_name TEXT,
                                                                mi_object_name TEXT,
                                                                mi_object_instance TEXT
                                                            ) LANGUAGE plpgsql AS
$$
DECLARE
    match_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- First selection: match db_address and server
    RETURN QUERY WITH first_select AS (
                                          SELECT mimic_name, object_name AS mimic_object_name, object_instance_name AS mimic_object_instance
                                              FROM mimic_usage_data
                                              WHERE (other_value = db_address OR db_addr = db_address)
                                                  AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                      ),
                     first_count AS (
                                        SELECT COUNT(*) AS match_count FROM first_select
                                    )
                 SELECT * FROM (
                                   -- Conditionally select based on the count
                                   SELECT fs.mimic_name AS mi_name,
                                       fs.mimic_object_name AS mi_object_name,
                                       fs.mimic_object_instance AS mi_object_instance
                                       FROM first_select fs, first_count fc
                                       WHERE fc.match_count < 2  -- Use the first selection if count is less than 2
                               ) AS primary_selection
                 UNION ALL
                 SELECT * FROM (
                                   -- If the count is greater than or equal to 2, use the second selection
                                   SELECT fs.mimic_name AS mi_name,
                                       fs.mimic_object_name AS mi_object_name,
                                       fs.mimic_object_instance AS mi_object_instance
                                       FROM first_select fs, first_count fc
                                       WHERE LOWER(fs.mimic_object_name) LIKE '%layout%'
                                           AND fc.match_count >= 2
                               ) AS secondary_selection
                          LIMIT 1;  -- Return a single result, based on first or second criteria

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             limit 100
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                             SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
limit 100;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             limit 1000
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                             SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
limit 1000;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                             limit 10000
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                             SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
limit 10000;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                             SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
limit 10000;
;-- -. . -..- - / . -. - .-. -.--
-- this might actually work wow
CREATE OR REPLACE FUNCTION pnp_resolve_mimic(
                                                db_address TEXT, works TEXT, server TEXT
                                            ) RETURNS TABLE (
                                                                mi_name TEXT,
                                                                mi_object_name TEXT,
                                                                mi_object_instance TEXT
                                                            ) LANGUAGE plpgsql AS
$$
DECLARE
    match_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- First selection: match db_address and server
    RETURN QUERY WITH first_select AS (
                                          SELECT mimic_name, object_name AS mimic_object_name, object_instance_name AS mimic_object_instance
                                              FROM mimic_usage_data
                                              WHERE (other_value = db_address OR db_addr = db_address)
                                                  AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                      ),
                     first_count AS (
                                        SELECT COUNT(*) AS match_count FROM first_select
                                    )
                 SELECT * FROM (
                                   -- Conditionally select based on the count
                                   SELECT fs.mimic_name AS mi_name,
                                       fs.mimic_object_name AS mi_object_name,
                                       fs.mimic_object_instance AS mi_object_instance
                                       FROM first_select fs, first_count fc
                                       WHERE fc.match_count < 2  -- Use the first selection if count is less than 2
                               ) AS primary_selection
                 UNION ALL
                 SELECT * FROM (
                                   -- If the count is greater than or equal to 2, use the second selection
                                   SELECT fs.mimic_name AS mi_name,
                                       fs.mimic_object_name AS mi_object_name,
                                       fs.mimic_object_instance AS mi_object_instance
                                       FROM first_select fs, first_count fc
                                       WHERE LOWER(fs.mimic_object_name) LIKE '%layout%'
                                           AND fc.match_count >= 2
                               ) AS secondary_selection
                          LIMIT 1;  -- Return a single result, based on first or second criteria

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                             SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                             limit 10000
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
limit 10000;
;-- -. . -..- - / . -. - .-. -.--
ANALYZE pnp_point_names;
;-- -. . -..- - / . -. - .-. -.--
ANALYZE pnp_mappings;
;-- -. . -..- - / . -. - .-. -.--
ANALYZE pnp_outstations;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 1000;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 1000;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        -- maybe they dont need the select distinct
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                             limit 1000
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr
        LIMIT 1000;
;-- -. . -..- - / . -. - .-. -.--
RETURN QUERY WITH
                     first_select AS (
                                         SELECT mimic_name, object_name, object_instance_name
--                                              INTO mi_name, mi_object_name, mi_object_instance
                                             FROM mimic_usage_data
                                             WHERE
                                                 (other_value = db_address OR db_addr = db_address)
                                                 AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                                     )
    select count(*) as match_count
    from first_select;
;-- -. . -..- - / . -. - .-. -.--
-- Take 2
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    match_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- First table to hold first select
    CREATE TEMP TABLE first_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- First selection
    -- Match the given db_address to the other_value and db_addr
    -- and the correct server with first part of mimic_name
    INSERT
        INTO
            first_select(
                            mimic_name, object_name, mimic_object_instance
                        )
    SELECT mimic_name, object_name, object_instance_name
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- count first_selection
    SELECT COUNT(*)
        INTO match_count
        FROM first_select;

    -- if 1 or 0 return next, else go on to next select
    IF match_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM first_select;
    END IF;
    -- ### End of 1st


    -- Second table to hold second select
    CREATE TEMP TABLE second_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- second selection
    -- Try to find a match that is layout_object
    INSERT
        INTO
            second_select(
                             mimic_name, object_name, mimic_object_instance
                         )
    SELECT mimic_name, object_name, mimic_object_instance
        FROM first_select
        WHERE
            LOWER(first_select.object_name) LIKE '%layout%';

    -- count second_selection
    SELECT COUNT(*)
        INTO match_count
        FROM second_select;

    -- if 1 or 0 return next, else go on to third_select
    IF match_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM second_select;
    END IF;
    -- ### End of 2nd


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE TABLE pnp_point_hierarchy_table (
                                           mimic_name TEXT,
                                           object_name TEXT,
                                           object_instance TEXT,
                                           server_name TEXT,
                                           db_addr TEXT,
                                           point_name TEXT,
                                           above_works TEXT, -- Change type as necessary
                                           works TEXT,       -- Change type as necessary
                                           process TEXT,     -- Change type as necessary
                                           function TEXT,    -- Change type as necessary
                                           asset TEXT,       -- Change type as necessary
                                           process_overwritten BOOLEAN,
                                           function_overwritten BOOLEAN,
                                           asset_overwritten BOOLEAN
                                       );
;-- -. . -..- - / . -. - .-. -.--
INSERT INTO pnp_point_hierarchy_table (
                                          mimic_name,
                                          object_name,
                                          object_instance,
                                          server_name,
                                          db_addr,
                                          point_name,
                                          above_works,
                                          works,
                                          process,
                                          function,
                                          asset,
                                          process_overwritten,
                                          function_overwritten,
                                          asset_overwritten
                                      )
SELECT DISTINCT ON (pn.db_addr, pn.server_name)
    mu.mimic_name,
    mu.object_name AS object_name,
    mu.object_instance_name AS object_instance,
    pn.server_name,
    pn.db_addr,
    pn.point_name,
    pnp_create_above_works() AS above_works,
    pnp_create_works(
            os_map.os_name,
            os_fdbbool.os_name,
            os_constat.os_name,
            os_fallback.os_name,
            os_configstat.os_name,
            os_maintenance.os_name,
            os_connecteddb.os_name,
            os_siteact.os_name,
            os_requeststg.os_name,
            os_outofcont.os_name,
            os_outofcont.os_name
    ) AS works,
    pnp_create_process(
            mu.mimic_name,
            os_map.os_name,
            mu.object_name,
            pn.point_name
    ) AS process_result
       FROM
           pnp_point_names pn
               LEFT JOIN mimic_usage_data AS mu
                   ON (pn.db_addr = mu.other_value
                       AND pn.server_name LIKE SPLIT_PART(mu.mimic_name, '_', 1))
               LEFT JOIN pnp_mappings AS ma
                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
               LEFT JOIN pnp_outstations AS os_map
                   ON (ma.outstation_num = os_map.os_number
                       AND pn.server_name = os_map.nexus_name)
               LEFT JOIN pnp_outstations AS os_fdbbool
                   ON (pn.server_name = os_fdbbool.nexus_name
                       AND pn.db_addr = os_fdbbool.failure_db_bool)
               LEFT JOIN pnp_outstations AS os_constat
                   ON (pn.server_name = os_constat.nexus_name
                       AND pn.db_addr = os_constat.connected_db_bool)
               LEFT JOIN pnp_outstations AS os_fallback
                   ON (pn.server_name = os_fallback.nexus_name
                       AND pn.db_addr = os_fallback.auto_fallback_db_bool)
               LEFT JOIN pnp_outstations AS os_configstat
                   ON (pn.server_name = os_configstat.nexus_name
                       AND pn.db_addr = os_configstat.config_status_db_mbit)
               LEFT JOIN pnp_outstations AS os_maintenance
                   ON (pn.server_name = os_maintenance.nexus_name
                       AND pn.db_addr = os_maintenance.maintenance_db_bool)
               LEFT JOIN pnp_outstations AS os_connecteddb
                   ON (pn.server_name = os_connecteddb.nexus_name
                       AND pn.db_addr = os_connecteddb.connected_db_bool)
               LEFT JOIN pnp_outstations AS os_siteact
                   ON (pn.server_name = os_siteact.nexus_name
                       AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
               LEFT JOIN pnp_outstations AS os_requeststg
                   ON (pn.server_name = os_requeststg.nexus_name
                       AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
               LEFT JOIN pnp_outstations AS os_outofcont
                   ON (pn.server_name = os_outofcont.nexus_name
                       AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
       ORDER BY
           pn.db_addr, pn.server_name;
;-- -. . -..- - / . -. - .-. -.--
drop table pnp_point_hierarchy_table;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT,
        works TEXT,
        server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    first_count INTEGER;
    second_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- Use CTE to hold the first selection
    WITH first_select AS (
                             SELECT
                                 mimic_name,
                                 object_name,
                                 object_instance_name
                                 FROM
                                     mimic_usage_data
                                 WHERE
                                     (other_value = db_address OR db_addr = db_address)
                                     AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server
                         )
    SELECT COUNT(*) INTO first_count FROM first_select;

    -- If 1 or 0, return first selection
    IF first_count < 2 THEN
        RETURN QUERY
            SELECT
                mimic_name AS mi_name,
                object_name AS mi_object_name,
                object_instance_name AS mi_object_instance
                FROM first_select;
    END IF;

    -- Use CTE for the second selection
    WITH second_select AS (
                              SELECT
                                  mimic_name,
                                  object_name,
                                  object_instance_name
                                  FROM
                                      first_select
                                  WHERE
                                      LOWER(object_name) LIKE '%layout%'
                          )
    SELECT COUNT(*) INTO second_count FROM second_select;

    -- If 1 or 0, return second selection
    IF second_count < 2 THEN
        RETURN QUERY
            SELECT
                mimic_name AS mi_name,
                object_name AS mi_object_name,
                object_instance_name AS mi_object_instance
                FROM second_select;
    END IF;

    -- If more than 1 match in both selections, you could continue with further logic here...
    -- Add your logic here if you need to handle further cases.

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
-- Take 2
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    first_count INTEGER;
    second_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- drop prev tables
    drop table if exists pnp_first_select;
    drop table if exists pnp_second_select;


    -- First table to hold first select
    CREATE unlogged TABLE pnp_first_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- First selection
    -- Match the given db_address to the other_value and db_addr
    -- and the correct server with first part of mimic_name
    INSERT
        INTO
            pnp_first_select(
                            mimic_name, object_name, mimic_object_instance
                        )
    SELECT mimic_name, object_name, object_instance_name
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- count first_selection
    SELECT COUNT(*)
        INTO first_count
        FROM pnp_first_select;

    -- if 1 or 0 return next, else go on to next select
--     IF match_count < 2
    if first_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM pnp_first_select;
    END IF;
    -- ### End of 1st


    -- Second table to hold second select
    CREATE unlogged TABLE pnp_second_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        )
        ON COMMIT DROP;

    -- second selection
    -- Try to find a match that is layout_object
    INSERT
        INTO
            pnp_second_select(
                             mimic_name, object_name, mimic_object_instance
                         )
    SELECT mimic_name, object_name, mimic_object_instance
        FROM pnp_first_select
        WHERE
            LOWER(pnp_first_select.object_name) LIKE '%layout%';

    -- count second_selection
    SELECT COUNT(*)
        INTO second_count
        FROM pnp_second_select;

    -- if 1 or 0 return next, else go on to third_select
    IF second_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM pnp_second_select;
    END IF;
    -- ### End of 2nd


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
-- Take 2
CREATE OR REPLACE FUNCTION pnp_resolve_mimic
    (
        db_address TEXT, works TEXT, server TEXT
    )
    RETURNS TABLE
                (
                    mi_name TEXT,
                    mi_object_name TEXT,
                    mi_object_instance TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    first_count INTEGER;
    second_count INTEGER;
BEGIN
    works := UPPER(works);
    server := UPPER(server);

    -- drop prev tables
    drop table if exists pnp_first_select;
    drop table if exists pnp_second_select;


    -- First table to hold first select
    CREATE unlogged TABLE pnp_first_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        );

    -- First selection
    -- Match the given db_address to the other_value and db_addr
    -- and the correct server with first part of mimic_name
    INSERT
        INTO
            pnp_first_select(
                            mimic_name, object_name, mimic_object_instance
                        )
    SELECT mimic_name, object_name, object_instance_name
        FROM mimic_usage_data
        WHERE
            (other_value = db_address OR db_addr = db_address)
            AND UPPER(SPLIT_PART(mimic_name, '_', 1)) = server;

    -- count first_selection
    SELECT COUNT(*)
        INTO first_count
        FROM pnp_first_select;

    -- if 1 or 0 return next, else go on to next select
--     IF match_count < 2
    if first_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM pnp_first_select;
    END IF;
    -- ### End of 1st


    -- Second table to hold second select
    CREATE unlogged TABLE pnp_second_select
        (
            mimic_name TEXT,
            object_name TEXT,
            mimic_object_instance TEXT
        );

    -- second selection
    -- Try to find a match that is layout_object
    INSERT
        INTO
            pnp_second_select(
                             mimic_name, object_name, mimic_object_instance
                         )
    SELECT mimic_name, object_name, mimic_object_instance
        FROM pnp_first_select
        WHERE
            LOWER(pnp_first_select.object_name) LIKE '%layout%';

    -- count second_selection
    SELECT COUNT(*)
        INTO second_count
        FROM pnp_second_select;

    -- if 1 or 0 return next, else go on to third_select
    IF second_count < 2
    THEN
        RETURN QUERY SELECT
                         mimic_name AS mi_name,
                         object_name AS mi_object_name,
                         mimic_object_instance AS mi_object_instance
                         FROM pnp_second_select;
    END IF;
    -- ### End of 2nd


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
drop table if exists pnp_first_select;
;-- -. . -..- - / . -. - .-. -.--
drop table if exists pnp_second_select;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                       --                                            ON (pn.server_name = mu.nexus AND pn.db_addr = mu.db_addr)
                                       --                                            Forfeit the server check cos its always empty
                                           ON (pn.db_addr = mu.other_value
                                               AND server_name LIKE SPLIT_PART(mimic_name, '_', 1))
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
GRANT EXECUTE ON FUNCTION truncate_table(TEXT) TO apisrv;
;-- -. . -..- - / . -. - .-. -.--
SELECT truncate_table('pnp_point_names');
;-- -. . -..- - / . -. - .-. -.--
CREATE TABLE pnp_point_names
(
    point_name  text NULL,
    db_addr     text NULL,
    server_name text NULL,
    primary key (server_name, db_addr)
);
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION truncate_table(table_name TEXT)
    RETURNS void
    LANGUAGE plpgsql AS $$
BEGIN
EXECUTE 'TRUNCATE TABLE ' || quote_ident(table_name::text) || ' CASCADE';
END $$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION truncate_table(table_name TEXT)
    RETURNS void
    LANGUAGE plpgsql AS $$
BEGIN
EXECUTE 'TRUNCATE TABLE ' || quote_ident(table_name) || ' CASCADE';
END $$;
;-- -. . -..- - / . -. - .-. -.--
grant
all
on table pnp_point_names to apisrv;
;-- -. . -..- - / . -. - .-. -.--
GRANT ALL
ON FUNCTION truncate_table(text) TO apisrv;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_truncate_table(table_name TEXT)
    RETURNS void
    LANGUAGE plpgsql AS $$
BEGIN
EXECUTE 'TRUNCATE TABLE ' || quote_ident(table_name) || ' CASCADE';
END $$;
;-- -. . -..- - / . -. - .-. -.--
GRANT ALL
ON FUNCTION pnp_truncate_table(text) TO apisrv;
;-- -. . -..- - / . -. - .-. -.--
DROP TABLE pnp_point_names;
;-- -. . -..- - / . -. - .-. -.--
GRANT
    ALL
    ON TABLE pnp_point_names TO apisrv;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    -- todo - need comment and server from dbpoint
    IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
        SELECT os_name
            INTO full_works
            FROM pnp_outstations
            WHERE
                os_name LIKE '%' || SUBSTRING(point_name, 1, 6)
                AND server_name = nexus_name;
    END IF;


    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    -- todo - need comment and server from dbpoint
--     IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
--         SELECT os_name
--             INTO full_works
--             FROM pnp_outstations
--             WHERE
--                 os_name LIKE '%' || SUBSTRING(point_name, 1, 6)
--                 AND server_name = nexus_name;
--     END IF;
--

    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    -- todo - need comment and server from dbpoint
    IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
        SELECT os_name
            INTO full_works
            FROM pnp_outstations
            WHERE
                os_name LIKE SUBSTRING(point_name, 1, 6) || '%'
                AND server_name = nexus_name;
    END IF;


    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    -- todo - need comment and server from dbpoint
--     IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
--         SELECT os_name
--             INTO full_works
--             FROM pnp_outstations
--             WHERE
--                 os_name LIKE SUBSTRING(point_name, 1, 6) || '%'
--                 AND server_name = nexus_name;
--         IF full_works IS NULL THEN
--             full_works = 'Unknown';
--         END IF;
--     END IF;
--

    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    -- todo - need comment and server from dbpoint
    IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
        SELECT os_name
            INTO full_works
            FROM pnp_outstations
            WHERE
                os_name LIKE SUBSTRING(point_name, 1, 6) || '%'
                AND server_name = nexus_name;
        IF full_works IS NULL THEN
            full_works = 'Unknown';
        END IF;
    END IF;


    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
SELECT *
    FROM
        pnp_point_hierarchy_view AS hv
            LEFT JOIN pnp_point_names AS pn
                ON (hv.point_name = pn.point_name AND hv.server_name = pn.server_name)
    WHERE
        works = 'Unknown' and lower(pn.comment) like '%rtl%';
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%'
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
--         object_name LIKE '%valve%' -> part of valves numbered
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' or point_name like '%valve%' THEN
        IF point_name LIKE '%vlv%' THEN
            pump_acro = 'vlv';
        ELSIF point_name like 'valve' THEN
            pump_acro = 'valve';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + length(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('UV Reactor ' || pump_num);
            ELSE
                asset := 'UV Reactor';
            END IF;
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%'
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
--         object_name LIKE '%valve%' -> part of valves numbered
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' or point_name like '%valve%' THEN
        IF point_name LIKE '%vlv%' THEN
            pump_acro = 'vlv';
        ELSIF point_name like '%valve%' THEN
            pump_acro = 'valve';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + length(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('UV Reactor ' || pump_num);
            ELSE
                asset := 'UV Reactor';
            END IF;
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%'
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
--         object_name LIKE '%valve%' -> part of valves numbered
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' or point_name like '%valve%' THEN
        IF point_name LIKE '%vlv%' THEN
            pump_acro = 'vlv';
        ELSIF point_name like '%valve%' THEN
            pump_acro = 'valve';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + length(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            asset := 'UV Reactor';
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%'
--         point_name LIKE '%vlv%' OR  -> part of valves numbered
--         object_name LIKE '%valve%' -> part of valves numbered
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' or point_name like '%valve%' THEN
        IF point_name LIKE '%vlv%' THEN
            pump_acro = 'vlv';
        ELSIF point_name like '%valve%' THEN
            pump_acro = 'valve';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + length(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[a-zA-Z0-9]+$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            asset := 'UV Reactor';
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%'
        --         point_name LIKE '%vlv%' OR  -> part of valves numbered
--         object_name LIKE '%valve%' -> part of valves numbered
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' OR point_name LIKE '%valve%' THEN
        IF point_name LIKE '%vlv%' THEN
            pump_acro = 'vlv';
        ELSIF point_name LIKE '%valve%' THEN
            pump_acro = 'valve';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[a-zA-Z]$' OR pump_num ~ '^\d+$' THEN
            asset := ('UV Reactor  ' || pump_num);
        ELSE
            asset := 'UV Reactor';
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    -- todo - doesn't say to use point_name but it should (cos mimic matching is thumbs down rn)
    -- not sure this actually needs to change anyway
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    -- todo - pass in process to create_asset
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%'
        --         point_name LIKE '%vlv%' OR  -> part of valves numbered
--         object_name LIKE '%valve%' -> part of valves numbered
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered TODO - this might need to include valve as well :)
    IF point_name LIKE '%vlv%' OR point_name LIKE '%valve%' THEN
        IF point_name LIKE '%vlv%' THEN
            pump_acro = 'vlv';
        ELSIF point_name LIKE '%valve%' THEN
            pump_acro = 'valve';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;


    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;


    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[a-zA-Z]$' OR pump_num ~ '^\d+$' THEN
            asset := ('UV Reactor  ' || UPPER(pump_num));
        ELSE
            asset := 'UV Reactor';
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND server_name LIKE mu.mimic_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        -- TODO more checks on this stuff (layout_object (?)) if its coagulent, dont know what im supposed to be checking though
        function := 'Coagulent';
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Reservoir (again)
    IF (point_name LIKE '%reservoir' OR point_name LIKE '%res%') AND process = 'storage'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;


    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site -> Power
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%intruder%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Vents
    -- 'But no chemical identifier such as cl2/ortho', so just this?
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%'
            AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2
    IF (point_name LIKE '%raw wtr ph%' OR
        point_name LIKE '%raw ph%' OR
        point_name LIKE '%ph%' OR
        point_name LIKE '%raw wtr turbidity%' OR
        point_name LIKE '%raw wtr turb%' OR
        point_name LIKE '%turbidity%' OR
        point_name LIKE '%raw wtr samp%' OR
        point_name LIKE '%raw water quality monitors%')
            AND
        (process = 'abstraction')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #3 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;


    -- Scraper - No answer given yet
    IF point_name LIKE '%scraper'
            AND
        (process = 'sewage treatment works' OR process = 'sewage pumping station')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Scraper(?)';
    END IF;

    -- Sedimentation
    IF (point_name LIKE '%sedimentation tank' AND process = 'sewage treatment works')
            OR
        (point_name LIKE '%sediment tank%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Sedimentation';
    END IF;


    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    -- NEED os_name ( NOOOOOOOO D:   )
    IF point_name LIKE '%contact tank%' AND process = 'water treatment works' -- and os_name like '%security%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;


    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        -- can do and function <> 'Security' but there's other security like ostn watchdog stuffs
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;

    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%storm tank%' OR
        point_name LIKE '%storm storage tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;

    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    IF point_name LIKE '%balance tank' OR
        point_name LIKE '%balancing tank%'
                AND point_name NOT LIKE '%backwash balance tank%' -- Brandon says backwash is priority so don't overwrite
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
            AND
        (process = 'water treatment works' OR process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        ranked_mimic_usage AS (
                                  SELECT
                                      mu.*,
                                              ROW_NUMBER() OVER (
                                          PARTITION BY pn.db_addr, pn.server_name
                                          ORDER BY
                                              CASE WHEN mu.object_name = 'layout' THEN 1 ELSE 2 END, -- Prioritize layout
                                              similarity(mu.mimic_name, pn.server_name) DESC -- Choose best match if no layout
                                          ) AS rn
                                      FROM
                                          pnp_point_names pn
                                              LEFT JOIN mimic_usage_data mu
                                                  ON pn.db_addr = mu.other_value
                                                      AND pn.server_name LIKE mu.mimic_name || '_%'
                                                      AND (pn.db_addr = mu.db_addr OR pn.db_addr = mu.other_value)
                              ),
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN ranked_mimic_usage mu
                                           ON pn.db_addr = mu.db_addr
                                               AND rn = 1;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- Step 1: Filter and prioritize mimic_usage_data entries
        prioritized_mimic_usage AS (
                                       SELECT
                                           mu.*,
                                                   ROW_NUMBER() OVER (
                                               PARTITION BY pn.db_addr, pn.server_name
                                               ORDER BY
                                                   CASE WHEN mu.object_name = 'layout' THEN 1 ELSE 2 END,  -- 'layout' gets highest priority
                                                   similarity(mu.mimic_name, pn.server_name) DESC           -- Secondary priority: best match by similarity
                                               ) AS rn
                                           FROM
                                               mimic_usage_data AS mu
                                                   JOIN
                                                   pnp_point_names AS pn
                                                           ON
                                                           (pn.db_addr = mu.other_value OR pn.db_addr = mu.db_addr)
                                                                   AND pn.server_name LIKE mu.mimic_name || '_%'
                                   ),

        -- Step 2: Select the top-ranked mimic for each db_addr and server_name combination
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               pmu.mimic_name,
                               pmu.object_name AS object_name,
                               pmu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name
                               ) AS works,
                               pnp_create_process(
                                       pmu.mimic_name,
                                       os_map.os_name,
                                       pmu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN
                                       prioritized_mimic_usage AS pmu
                                               ON
                                               pn.db_addr = pmu.db_addr AND pn.server_name = pmu.server_name AND pmu.rn = 1
                                       LEFT JOIN
                                       pnp_mappings AS ma
                                               ON
                                               (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN
                                       pnp_outstations AS os_map
                                               ON
                                               (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN
                                       pnp_outstations AS os_fdbbool
                                               ON
                                               (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_constat
                                               ON
                                               (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_fallback
                                               ON
                                               (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_configstat
                                               ON
                                               (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN
                                       pnp_outstations AS os_maintenance
                                               ON
                                               (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_connecteddb
                                               ON
                                               (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_siteact
                                               ON
                                               (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_requeststg
                                               ON
                                               (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN
                                       pnp_outstations AS os_outofcont
                                               ON
                                               (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- Step 1: Initial Filtering for mimic_usage_data
        filtered_mimic_usage AS (
                                    SELECT
                                        mu.*,
                                        pn.server_name,
                                        pn.db_addr,
                                                ROW_NUMBER() OVER (
                                            PARTITION BY pn.db_addr, pn.server_name
                                            ORDER BY
                                                CASE WHEN mu.object_name = 'layout' THEN 1 ELSE 2 END,   -- Priority 1: 'layout' rows
                                                similarity(mu.mimic_name, pn.server_name) DESC           -- Priority 2: best match by similarity
                                            ) AS rn
                                        FROM
                                            mimic_usage_data AS mu
                                                JOIN
                                                pnp_point_names AS pn
                                                        ON
                                                        (pn.db_addr = mu.db_addr OR pn.db_addr = mu.other_value)
                                                                AND pn.server_name LIKE mu.mimic_name || '_%'
                                ),

        -- Step 2: Select the top-ranked mimic for each db_addr and server_name combination
        prioritized_mimic_usage AS (
                                       SELECT *
                                           FROM filtered_mimic_usage
                                           WHERE rn = 1  -- Only select the highest priority row
                                   ),

        -- Step 3: Main CTE to build the process results
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               pmu.mimic_name,
                               pmu.object_name AS object_name,
                               pmu.object_instance_name AS object_instance,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name
                               ) AS works,
                               pnp_create_process(
                                       pmu.mimic_name,
                                       os_map.os_name,
                                       pmu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN
                                       prioritized_mimic_usage AS pmu
                                               ON
                                               pn.db_addr = pmu.db_addr AND pn.server_name = pmu.server_name
                                       LEFT JOIN
                                       pnp_mappings AS ma
                                               ON
                                               (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN
                                       pnp_outstations AS os_map
                                               ON
                                               (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN
                                       pnp_outstations AS os_fdbbool
                                               ON
                                               (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_constat
                                               ON
                                               (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_fallback
                                               ON
                                               (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_configstat
                                               ON
                                               (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN
                                       pnp_outstations AS os_maintenance
                                               ON
                                               (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_connecteddb
                                               ON
                                               (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_siteact
                                               ON
                                               (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN
                                       pnp_outstations AS os_requeststg
                                               ON
                                               (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN
                                       pnp_outstations AS os_outofcont
                                               ON
                                               (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)

                               (first_value(mu.mimic_name) OVER
                                   (PARTITION BY CASE
                                                     when pn.db_addr = mu.other_value then pn.db_addr
                                                 END
                                   )),

--                                mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND server_name LIKE mu.mimic_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? i have no idea
        mimic_cte AS (
                         SELECT
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,
                             pnp_resolve_mimic(db_addr, works, server_name) AS mimic
                             FROM works_cte
                     ),

        process_cte AS (
                           SELECT
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic,
                               pnp_create_process((mimic).mi_name, os_name,
                                                  (mimic).mi_object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic,
                                process_cte.process,
                                pnp_create_function((mimic).mi_name, (process).process,
                                                    (mimic).mi_object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset((mimic).mi_object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT
        (mimic).mi_name AS mimic_name,
        (mimic).mi_object_name AS object_name,
        (mimic).mi_object_instance AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT, other_value TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    other_value := LOWER(other_value);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        IF other_value LIKE '%coagulant' OR
            other_value LIKE '%coag%'
        THEN
            function := 'Coagulent';
        END IF;
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Reservoir (again)
    IF (point_name LIKE '%reservoir' OR point_name LIKE '%res%') AND process = 'storage'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;


    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site -> Power
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%intruder%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Vents
    -- 'But no chemical identifier such as cl2/ortho', so just this?
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%'
            AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2
    IF (point_name LIKE '%raw wtr ph%' OR
        point_name LIKE '%raw ph%' OR
        point_name LIKE '%ph%' OR
        point_name LIKE '%raw wtr turbidity%' OR
        point_name LIKE '%raw wtr turb%' OR
        point_name LIKE '%turbidity%' OR
        point_name LIKE '%raw wtr samp%' OR
        point_name LIKE '%raw water quality monitors%')
            AND
        (process = 'abstraction')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #3 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;


    -- Scraper - No answer given yet
    IF point_name LIKE '%scraper'
            AND
        (process = 'sewage treatment works' OR process = 'sewage pumping station')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Scraper(?)';
    END IF;

    -- Sedimentation
    IF (point_name LIKE '%sedimentation tank' AND process = 'sewage treatment works')
            OR
        (point_name LIKE '%sediment tank%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Sedimentation';
    END IF;


    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    -- NEED os_name ( NOOOOOOOO D:   )
    IF point_name LIKE '%contact tank%' AND process = 'water treatment works' -- and os_name like '%security%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;


    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        -- can do and function <> 'Security' but there's other security like ostn watchdog stuffs
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;

    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%storm tank%' OR
        point_name LIKE '%storm storage tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;

    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    IF point_name LIKE '%balance tank' OR
        point_name LIKE '%balancing tank%'
                AND point_name NOT LIKE '%backwash balance tank%' -- Brandon says backwash is priority so don't overwrite
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
            AND
        (process = 'water treatment works' OR process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)

                               (first_value(mu.mimic_name) OVER
                                   (PARTITION BY CASE
                                                     when pn.db_addr = mu.other_value then pn.db_addr
                                                 END
                                   )) as mimic_name,

--                                mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND server_name LIKE mu.mimic_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)

--                                (first_value(mu.mimic_name) OVER
--                                    (PARTITION BY CASE
--                                                      when pn.db_addr = mu.other_value then pn.db_addr
--                                                  END
--                                    )) as mimic_name,
--
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND server_name LIKE mu.mimic_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)

--                                (first_value(mu.mimic_name) OVER
--                                    (PARTITION BY CASE
--                                                      when pn.db_addr = mu.other_value then pn.db_addr
--                                                  END
--                                    )) as mimic_name,
--
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND pn.server_name LIKE mu.mimic_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)

--                                (first_value(mu.mimic_name) OVER
--                                    (PARTITION BY CASE
--                                                      when pn.db_addr = mu.other_value then pn.db_addr
--                                                  END
--                                    )) as mimic_name,
--
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND pn.server_name LIKE
                                   SPLIT_PART(mu.mimic_name, '_', 1))
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)

--                                (first_value(mu.mimic_name) OVER
--                                    (PARTITION BY CASE
--                                                      when pn.db_addr = mu.other_value then pn.db_addr
--                                                  END
--                                    )) as mimic_name,
--
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT, other_value TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    other_value := LOWER(other_value);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        IF other_value LIKE '%coagulant' OR
            other_value LIKE '%coag%'
        THEN
            function := 'Coagulant';
        END IF;
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Reservoir (again)
    IF (point_name LIKE '%reservoir' OR point_name LIKE '%res%') AND process = 'storage'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;


    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site -> Power
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%intruder%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR -- says 'telemetry function' but I disagree
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Vents
    -- 'But no chemical identifier such as cl2/ortho', so just this?
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%'
            AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2
    IF (point_name LIKE '%raw wtr ph%' OR
        point_name LIKE '%raw ph%' OR
        point_name LIKE '%ph%' OR
        point_name LIKE '%raw wtr turbidity%' OR
        point_name LIKE '%raw wtr turb%' OR
        point_name LIKE '%turbidity%' OR
        point_name LIKE '%raw wtr samp%' OR
        point_name LIKE '%raw water quality monitors%')
            AND
        (process = 'abstraction')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #3 todo Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;


    -- Scraper - No answer given yet
    IF point_name LIKE '%scraper'
            AND
        (process = 'sewage treatment works' OR process = 'sewage pumping station')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Scraper(?)';
    END IF;

    -- Sedimentation
    IF (point_name LIKE '%sedimentation tank' AND process = 'sewage treatment works')
            OR
        (point_name LIKE '%sediment tank%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Sedimentation';
    END IF;


    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    -- NEED os_name ( NOOOOOOOO D:   )
    IF point_name LIKE '%contact tank%' AND process = 'water treatment works' -- and os_name like '%security%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;


    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        -- can do and function <> 'Security' but there's other security like ostn watchdog stuffs
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;

    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%storm tank%' OR
        point_name LIKE '%storm storage tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;

    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    IF point_name LIKE '%balance tank' OR
        point_name LIKE '%balancing tank%'
                AND point_name NOT LIKE '%backwash balance tank%' -- Brandon says backwash is priority so don't overwrite
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
            AND
        (process = 'water treatment works' OR process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (pn.db_addr = mu.other_value
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
SELECT
    mu.mimic_name,
    mu.object_name AS object_name,
    mu.object_instance_name AS object_instance,
    mu.other_value,
    pn.server_name,
    pn.db_addr,
    pn.point_name,
    pn.comment
    FROM
        pnp_point_names pn
            LEFT JOIN mimic_usage_data AS mu
                ON (
                pn.db_addr = mu.other_value
                        AND mu.mimic_name LIKE pn.server_name || '_%')
            LEFT JOIN pnp_mappings AS ma
                ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
            LEFT JOIN pnp_outstations AS os_map
                ON (ma.outstation_num = os_map.os_number
                    AND pn.server_name = os_map.nexus_name)
            LEFT JOIN pnp_outstations AS os_fdbbool
                ON (pn.server_name = os_fdbbool.nexus_name
                    AND pn.db_addr = os_fdbbool.failure_db_bool)
            LEFT JOIN pnp_outstations AS os_constat
                ON (pn.server_name = os_constat.nexus_name
                    AND pn.db_addr = os_constat.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_fallback
                ON (pn.server_name = os_fallback.nexus_name
                    AND pn.db_addr = os_fallback.auto_fallback_db_bool)
            LEFT JOIN pnp_outstations AS os_configstat
                ON (pn.server_name = os_configstat.nexus_name
                    AND pn.db_addr = os_configstat.config_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_maintenance
                ON (pn.server_name = os_maintenance.nexus_name
                    AND pn.db_addr = os_maintenance.maintenance_db_bool)
            LEFT JOIN pnp_outstations AS os_connecteddb
                ON (pn.server_name = os_connecteddb.nexus_name
                    AND pn.db_addr = os_connecteddb.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_siteact
                ON (pn.server_name = os_siteact.nexus_name
                    AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
            LEFT JOIN pnp_outstations AS os_requeststg
                ON (pn.server_name = os_requeststg.nexus_name
                    AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_outofcont
                ON (pn.server_name = os_outofcont.nexus_name
                    AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
        );
;-- -. . -..- - / . -. - .-. -.--
SELECT
    mu.mimic_name,
    mu.object_name AS object_name,
    mu.object_instance_name AS object_instance,
    mu.other_value,
    pn.server_name,
    pn.db_addr,
    pn.point_name,
    pn.comment
    FROM
        pnp_point_names pn
            LEFT JOIN mimic_usage_data AS mu
                ON (
                pn.db_addr = mu.other_value
                        AND mu.mimic_name LIKE pn.server_name || '_%')
            LEFT JOIN pnp_mappings AS ma
                ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
            LEFT JOIN pnp_outstations AS os_map
                ON (ma.outstation_num = os_map.os_number
                    AND pn.server_name = os_map.nexus_name)
            LEFT JOIN pnp_outstations AS os_fdbbool
                ON (pn.server_name = os_fdbbool.nexus_name
                    AND pn.db_addr = os_fdbbool.failure_db_bool)
            LEFT JOIN pnp_outstations AS os_constat
                ON (pn.server_name = os_constat.nexus_name
                    AND pn.db_addr = os_constat.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_fallback
                ON (pn.server_name = os_fallback.nexus_name
                    AND pn.db_addr = os_fallback.auto_fallback_db_bool)
            LEFT JOIN pnp_outstations AS os_configstat
                ON (pn.server_name = os_configstat.nexus_name
                    AND pn.db_addr = os_configstat.config_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_maintenance
                ON (pn.server_name = os_maintenance.nexus_name
                    AND pn.db_addr = os_maintenance.maintenance_db_bool)
            LEFT JOIN pnp_outstations AS os_connecteddb
                ON (pn.server_name = os_connecteddb.nexus_name
                    AND pn.db_addr = os_connecteddb.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_siteact
                ON (pn.server_name = os_siteact.nexus_name
                    AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
            LEFT JOIN pnp_outstations AS os_requeststg
                ON (pn.server_name = os_requeststg.nexus_name
                    AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_outofcont
                ON (pn.server_name = os_outofcont.nexus_name
                    AND pn.db_addr = os_outofcont.out_of_contact_db_bool);
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
BEGIN


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
SELECT

--     coalesce(first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser() ),)


    mu.mimic_name,
    mu.object_name AS object_name,
    mu.object_instance_name AS object_instance,
    mu.other_value,
    pn.server_name,
    pn.db_addr,
    pn.point_name,
    pn.comment
    FROM
        pnp_point_names pn
            LEFT JOIN mimic_usage_data AS mu
                ON (
                pn.db_addr = mu.other_value
                        AND mu.mimic_name LIKE pn.server_name || '_%')
            LEFT JOIN pnp_mappings AS ma
                ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
            LEFT JOIN pnp_outstations AS os_map
                ON (ma.outstation_num = os_map.os_number
                    AND pn.server_name = os_map.nexus_name)
            LEFT JOIN pnp_outstations AS os_fdbbool
                ON (pn.server_name = os_fdbbool.nexus_name
                    AND pn.db_addr = os_fdbbool.failure_db_bool)
            LEFT JOIN pnp_outstations AS os_constat
                ON (pn.server_name = os_constat.nexus_name
                    AND pn.db_addr = os_constat.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_fallback
                ON (pn.server_name = os_fallback.nexus_name
                    AND pn.db_addr = os_fallback.auto_fallback_db_bool)
            LEFT JOIN pnp_outstations AS os_configstat
                ON (pn.server_name = os_configstat.nexus_name
                    AND pn.db_addr = os_configstat.config_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_maintenance
                ON (pn.server_name = os_maintenance.nexus_name
                    AND pn.db_addr = os_maintenance.maintenance_db_bool)
            LEFT JOIN pnp_outstations AS os_connecteddb
                ON (pn.server_name = os_connecteddb.nexus_name
                    AND pn.db_addr = os_connecteddb.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_siteact
                ON (pn.server_name = os_siteact.nexus_name
                    AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
            LEFT JOIN pnp_outstations AS os_requeststg
                ON (pn.server_name = os_requeststg.nexus_name
                    AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_outofcont
                ON (pn.server_name = os_outofcont.nexus_name
                    AND pn.db_addr = os_outofcont.out_of_contact_db_bool);
;-- -. . -..- - / . -. - .-. -.--
SELECT

--     coalesce(first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, point_name)),)


    mu.mimic_name,
    mu.object_name AS object_name,
    mu.object_instance_name AS object_instance,
    mu.other_value,
    pn.server_name,
    pn.db_addr,
    mu.point_name as mu_name,
    pn.point_name as pn_name,
    pn.comment
    FROM
        pnp_point_names pn
            LEFT JOIN mimic_usage_data AS mu
                ON (
                pn.db_addr = mu.other_value
                        AND mu.mimic_name LIKE pn.server_name || '_%')
            LEFT JOIN pnp_mappings AS ma
                ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
            LEFT JOIN pnp_outstations AS os_map
                ON (ma.outstation_num = os_map.os_number
                    AND pn.server_name = os_map.nexus_name)
            LEFT JOIN pnp_outstations AS os_fdbbool
                ON (pn.server_name = os_fdbbool.nexus_name
                    AND pn.db_addr = os_fdbbool.failure_db_bool)
            LEFT JOIN pnp_outstations AS os_constat
                ON (pn.server_name = os_constat.nexus_name
                    AND pn.db_addr = os_constat.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_fallback
                ON (pn.server_name = os_fallback.nexus_name
                    AND pn.db_addr = os_fallback.auto_fallback_db_bool)
            LEFT JOIN pnp_outstations AS os_configstat
                ON (pn.server_name = os_configstat.nexus_name
                    AND pn.db_addr = os_configstat.config_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_maintenance
                ON (pn.server_name = os_maintenance.nexus_name
                    AND pn.db_addr = os_maintenance.maintenance_db_bool)
            LEFT JOIN pnp_outstations AS os_connecteddb
                ON (pn.server_name = os_connecteddb.nexus_name
                    AND pn.db_addr = os_connecteddb.connected_db_bool)
            LEFT JOIN pnp_outstations AS os_siteact
                ON (pn.server_name = os_siteact.nexus_name
                    AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
            LEFT JOIN pnp_outstations AS os_requeststg
                ON (pn.server_name = os_requeststg.nexus_name
                    AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
            LEFT JOIN pnp_outstations AS os_outofcont
                ON (pn.server_name = os_outofcont.nexus_name
                    AND pn.db_addr = os_outofcont.out_of_contact_db_bool);
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works text
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
    DECLARE
        score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);

    -- somehow return a number to score each match with the mimic :DDD
    -- so they're already matched up with:
    -- (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- and
    -- server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10

    -- check the mimic_name match, + 1 for each part that matches ?

    -- status_page + 5


    IF object_name LIKE '%layout%' THEN
        score := score + 10;
    END IF;

    -- Add the similarity *10
    score := score + (
        (word_similarity(mimic_name, works))
        *10
        );

    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? I have no idea
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,

                             coalesce(first_value(mu.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),) as mimic_name,
                             coalesce(first_value(mu.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),) as object_name,
                             coalesce(first_value(mu.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),) as object_instance_name,
                             coalesce(first_value(mu.other_value) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),) as other_value

                             FROM works_cte
                             LEFT JOIN mimic_usage_data AS mu
                                     ON (
                                     (works_cte.db_addr = mu.other_value or works_cte.db_addr = mu.db_addr)
                                             AND mu.mimic_name LIKE works_cte.server_name || '_%')
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic_name,
                               mimic_cte.object_name,
                               mimic_cte.object_instance_name,

                               pnp_create_process(mimic_cte.mimic_name, os_name,
                                                  mimic_cte.object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic_name,
                                process_cte.object_name,
                                process_cte.object_instance_name,
                                process_cte.process,
                                pnp_create_function(process_cte.mimic_name, (process).process,
                                                    process_cte.object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic_name,
                             function_cte.object_name,
                             function_cte.object_instance_name,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset(function_cte.object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT



        mimic_name,
        object_name AS object_name,
        object_instance_name AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works text
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
    DECLARE
        score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);

    -- somehow return a number to score each match with the mimic :DDD
    -- so they're already matched up with:
    -- (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- and
    -- server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10

    -- check the mimic_name match, + 1 for each part that matches ?

    -- status_page + 5


    IF object_name LIKE '%layout%' THEN
        score := score + 10;
    END IF;

    -- Add the similarity *10
    score := score + (
        (word_similarity(mimic_name, works))
        *10
        );

    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    return score;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
explain analyse CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? I have no idea
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,

                             coalesce(first_value(mu.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as mimic_name,
                             coalesce(first_value(mu.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as object_name,
                             coalesce(first_value(mu.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as object_instance_name,
                             coalesce(first_value(mu.other_value) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as other_value

                             FROM works_cte
                             LEFT JOIN mimic_usage_data AS mu
                                     ON (
                                     (works_cte.db_addr = mu.other_value or works_cte.db_addr = mu.db_addr)
                                             AND mu.mimic_name LIKE works_cte.server_name || '_%')
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic_name,
                               mimic_cte.object_name,
                               mimic_cte.object_instance_name,

                               pnp_create_process(mimic_cte.mimic_name, os_name,
                                                  mimic_cte.object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic_name,
                                process_cte.object_name,
                                process_cte.object_instance_name,
                                process_cte.process,
                                pnp_create_function(process_cte.mimic_name, (process).process,
                                                    process_cte.object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic_name,
                             function_cte.object_name,
                             function_cte.object_instance_name,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset(function_cte.object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT



        mimic_name,
        object_name AS object_name,
        object_instance_name AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works text
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
    DECLARE
        score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);

    -- somehow return a number to score each match with the mimic :DDD
    -- so they're already matched up with:
    -- (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- and
    -- server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10

    -- check the mimic_name match, + 1 for each part that matches ?

    -- status_page + 5


    IF object_name LIKE '%layout%' THEN
        score := score + 10;
    END IF;

    return score;
    -- Add the similarity *10
    score := score + (
        (word_similarity(mimic_name, works))
        *10
        );

    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? I have no idea
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,

                             coalesce(first_value(mu.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as mimic_name,
                             coalesce(first_value(mu.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as object_name,
                             coalesce(first_value(mu.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as object_instance_name,
                             coalesce(first_value(mu.other_value) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)),'') as other_value

                             FROM works_cte
                             LEFT JOIN mimic_usage_data AS mu
                                     ON (
                                     (works_cte.db_addr = mu.other_value or works_cte.db_addr = mu.db_addr)
                                             AND mu.mimic_name LIKE works_cte.server_name || '_%')
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,
                               mimic_cte.mimic_name,
                               mimic_cte.object_name,
                               mimic_cte.object_instance_name,

                               pnp_create_process(mimic_cte.mimic_name, os_name,
                                                  mimic_cte.object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,
                                process_cte.mimic_name,
                                process_cte.object_name,
                                process_cte.object_instance_name,
                                process_cte.process,
                                pnp_create_function(process_cte.mimic_name, (process).process,
                                                    process_cte.object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,
                             function_cte.mimic_name,
                             function_cte.object_name,
                             function_cte.object_instance_name,
                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset(function_cte.object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT



        mimic_name,
        object_name AS object_name,
        object_instance_name AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
    DECLARE
        score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);

    -- somehow return a number to score each match with the mimic :DDD
    -- so they're already matched up with:
    -- (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- and
    -- server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10

    -- check the mimic_name match, + 1 for each part that matches ?

    -- status_page + 5


    IF object_name LIKE '%layout%' THEN
        score := score + 10;
    END IF;

    return score;
    -- Add the similarity *10
--     score := score + (
--         (word_similarity(mimic_name, works))
--         *10
--         );
--
--     IF object_name = 'status_page' THEN
--         score := score + 5;
--     END IF;


END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce(first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),),
                               coalesce(first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),) as object_name,
                               coalesce(first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),) as object_instance,
                               coalesce(first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),),

--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce(first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),''),
                               coalesce(first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),'') as object_name,
                               coalesce(first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),'') as object_instance,
                               coalesce(first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),''),

--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce(first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),'') as mimic_name,
                               coalesce(first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),'') as object_name,
                               coalesce(first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),'') as object_instance,
                               coalesce(first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name)),'') as other_value,

--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'MISSING') as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'MISSING') as other_value,

--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                                coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as mimic_name,
--                                coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as object_name,
--                                coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'MISSING') as object_instance,
--                                coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'') as other_value,
--
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                                coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as mimic_name,
--                                coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as object_name,
--                                coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'MISSING') as object_instance,
--                                coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'') as other_value,
--
                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'MISSING') as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'') as other_value,
--
--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                                coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as mimic_name,
--                                coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), 'MISSING') as object_name,
--                                coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'MISSING') as object_instance,
--                                coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),'') as other_value,

                               mu.mimic_name,
                               mu.object_name AS object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), ) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)), ) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)),) as other_value,

--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) ) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) ) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
        SELECT os_name
            INTO full_works
            FROM pnp_outstations
            WHERE
                os_name LIKE SUBSTRING(point_name, 1, 6) || '%'
                AND server_name = nexus_name;
        IF full_works IS NULL THEN
            full_works = 'Unknown';
        END IF;
    END IF;


    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('ostn', 'stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
    DECLARE
        score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);

    -- somehow return a number to score each match with the mimic :DDD
    -- so they're already matched up with:
    -- (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- and
    -- server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10

    -- check the mimic_name match, + 1 for each part that matches ?

    -- status_page + 5


    IF object_name LIKE '%layout%' THEN
        score := score + 10;
    END IF;

    -- Add the similarity *10
--     score := score + (
--         (word_similarity(mimic_name, works))
--         *10
--         );

    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    return score;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

--                                mu.mimic_name,
--                                mu.object_name AS object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,
                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,
                                       mu.mimic_name,
                                       mu.object_name,
                                       mu.object_instance_name,
                                       mu.other_value
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN mimic_usage_data AS mu
                                                   ON (pn.db_addr = mu.other_value AND mu.mimic_name LIKE pn.server_name || '_%')
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               db_addr,
                               point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_map.os_name,
                                       object_name,
                                       point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works text
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
    DECLARE
        score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
    works := LOWER(works);

    -- somehow return a number to score each match with the mimic :DDD
    -- so they're already matched up with:
    -- (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- and
    -- server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10

    -- check the mimic_name match, + 1 for each part that matches ?

    -- status_page + 5


    IF object_name LIKE '%layout%' THEN
        score := score + 10;
    END IF;

--     Add the similarity *10
    score := score + (
        (word_similarity(mimic_name, works))
        *10
        );

    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    return score;

END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       mu.mimic_name,
                                       mu.object_name,
                                       mu.object_instance_name,
                                       mu.other_value,
                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN mimic_usage_data AS mu
                                                   ON (pn.db_addr = mu.other_value AND mu.mimic_name LIKE pn.server_name || '_%')
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               db_addr,
                               point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               db_addr,
                               point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               db_addr,
                               point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        coalesce((first_value(object_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        coalesce((first_value(object_instance) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        -- First CTE: Calculate "works" and "above_works" first
        initial_process_cte AS (
                                   SELECT
                                       pn.server_name,
                                       pn.db_addr,
                                       pn.point_name,
                                       pn.comment,
                                       pnp_create_above_works() AS above_works,
                                       pnp_create_works(
                                               os_map.os_name,
                                               os_fdbbool.os_name,
                                               os_constat.os_name,
                                               os_fallback.os_name,
                                               os_configstat.os_name,
                                               os_maintenance.os_name,
                                               os_connecteddb.os_name,
                                               os_siteact.os_name,
                                               os_requeststg.os_name,
                                               os_outofcont.os_name,
                                               os_outofcont.os_name,
                                               pn.point_name,
                                               pn.server_name,
                                               pn.comment
                                       ) AS works,




                                       os_map.os_name
                                       FROM
                                           pnp_point_names pn
                                               LEFT JOIN pnp_mappings AS ma
                                                   ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                               LEFT JOIN pnp_outstations AS os_map
                                                   ON (ma.outstation_num = os_map.os_number AND pn.server_name = os_map.nexus_name)
                                               LEFT JOIN pnp_outstations AS os_fdbbool
                                                   ON (pn.server_name = os_fdbbool.nexus_name AND pn.db_addr = os_fdbbool.failure_db_bool)
                                               LEFT JOIN pnp_outstations AS os_constat
                                                   ON (pn.server_name = os_constat.nexus_name AND pn.db_addr = os_constat.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_fallback
                                                   ON (pn.server_name = os_fallback.nexus_name AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                               LEFT JOIN pnp_outstations AS os_configstat
                                                   ON (pn.server_name = os_configstat.nexus_name AND pn.db_addr = os_configstat.config_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_maintenance
                                                   ON (pn.server_name = os_maintenance.nexus_name AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                               LEFT JOIN pnp_outstations AS os_connecteddb
                                                   ON (pn.server_name = os_connecteddb.nexus_name AND pn.db_addr = os_connecteddb.connected_db_bool)
                                               LEFT JOIN pnp_outstations AS os_siteact
                                                   ON (pn.server_name = os_siteact.nexus_name AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                               LEFT JOIN pnp_outstations AS os_requeststg
                                                   ON (pn.server_name = os_requeststg.nexus_name AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                               LEFT JOIN pnp_outstations AS os_outofcont
                                                   ON (pn.server_name = os_outofcont.nexus_name AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                               ),

        -- Second CTE: Use initial_process_cte to calculate the first_value fields using pnp_mimic_prioritiser
        process_cte AS (
                           SELECT DISTINCT ON (server_name, db_addr)
                               coalesce((first_value(mimic_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
                               coalesce((first_value(object_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
                               coalesce((first_value(object_instance_name) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
                               coalesce((first_value(other_value) OVER (PARTITION BY initial_process_cte.db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as other_value,
                               server_name,
                               initial_process_cte.db_addr,
                               initial_process_cte.point_name,
                               comment,
                               above_works,
                               works,
                               pnp_create_process(
                                       mimic_name,
                                       os_name,
                                       object_name,
                                       initial_process_cte.point_name
                               ) AS process_result
                               FROM
                                   initial_process_cte
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (initial_process_cte.db_addr = mu.other_value AND mu.mimic_name LIKE server_name || '_%')
                       )

    -- Final select to retrieve the columns from process_cte and apply the additional functions
    SELECT
        coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
        coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? I have no idea
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,

                             first_value(mu.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as mimic_name,
                             first_value(mu.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_name,
                             first_value(mu.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_instance_name,
                             first_value(mu.other_value) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as other_value

                             FROM works_cte
                             LEFT JOIN mimic_usage_data AS mu
                                     ON (
                                     (works_cte.db_addr = mu.other_value or works_cte.db_addr = mu.db_addr)
                                             AND mu.mimic_name LIKE works_cte.server_name || '_%')
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,

                               first_value(mimic_cte.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as mimic_name,
                               first_value(mimic_cte.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_name,
                               first_value(mimic_cte.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_instance_name,
--                                mimic_cte.mimic_name,
--                                mimic_cte.object_name,
--                                mimic_cte.object_instance_name,

                               pnp_create_process(mimic_cte.mimic_name, os_name,
                                                  mimic_cte.object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,


                                first_value(process_cte.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as mimic_name,
                                first_value(process_cte.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_name,
                                first_value(process_cte.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_instance_name,
--                                 process_cte.mimic_name,
--                                 process_cte.object_name,
--                                 process_cte.object_instance_name,

                                process_cte.process,
                                pnp_create_function(process_cte.mimic_name, (process).process,
                                                    process_cte.object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,


                             first_value(function_cte.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as mimic_name,
                             first_value(function_cte.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_name,
                             first_value(function_cte.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_instance_name,
--                              function_cte.mimic_name,
--                              function_cte.object_name,
--                              function_cte.object_instance_name,

                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset(function_cte.object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT



        mimic_name,
        object_name AS object_name,
        object_instance_name AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? I have no idea
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,

                             first_value(mu.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as mimic_name,
                             first_value(mu.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_name,
                             first_value(mu.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_instance_name,
                             first_value(mu.other_value) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as other_value

                             FROM works_cte
                             LEFT JOIN mimic_usage_data AS mu
                                     ON (
                                     (works_cte.db_addr = mu.other_value or works_cte.db_addr = mu.db_addr)
                                             AND mu.mimic_name LIKE works_cte.server_name || '_%')
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,

                               first_value(mimic_cte.mimic_name) OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, mimic_cte.works)) as mimic_name,
                               first_value(mimic_cte.object_name) OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, mimic_cte.works)) as object_name,
                               first_value(mimic_cte.object_instance_name) OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, mimic_cte.works)) as object_instance_name,
--                                mimic_cte.mimic_name,
--                                mimic_cte.object_name,
--                                mimic_cte.object_instance_name,

                               pnp_create_process(mimic_cte.mimic_name, os_name,
                                                  mimic_cte.object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,


                                first_value(process_cte.mimic_name) OVER (PARTITION BY process_cte.db_addr, process_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, process_cte.works)) as mimic_name,
                                first_value(process_cte.object_name) OVER (PARTITION BY process_cte.db_addr, process_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, process_cte.works)) as object_name,
                                first_value(process_cte.object_instance_name) OVER (PARTITION BY process_cte.db_addr, process_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, process_cte.works)) as object_instance_name,
--                                 process_cte.mimic_name,
--                                 process_cte.object_name,
--                                 process_cte.object_instance_name,

                                process_cte.process,
                                pnp_create_function(process_cte.mimic_name, (process).process,
                                                    process_cte.object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,


                             first_value(function_cte.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as mimic_name,
                             first_value(function_cte.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_name,
                             first_value(function_cte.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_instance_name,
--                              function_cte.mimic_name,
--                              function_cte.object_name,
--                              function_cte.object_instance_name,

                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset(function_cte.object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT



        mimic_name,
        object_name AS object_name,
        object_instance_name AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        works_cte AS (
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                             ORDER BY pn.db_addr, pn.server_name
                     ),

        -- should all these be cross join laterals??? I have no idea
        mimic_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             works_cte.server_name,
                             works_cte.db_addr,
                             works_cte.point_name,
                             works_cte.os_name,
                             works_cte.above_works,
                             works_cte.works,

                             first_value(mu.mimic_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as mimic_name,
                             first_value(mu.object_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_name,
                             first_value(mu.object_instance_name) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as object_instance_name,
                             first_value(mu.other_value) OVER (PARTITION BY works_cte.db_addr, works_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works_cte.works)) as other_value

                             FROM works_cte
                             LEFT JOIN mimic_usage_data AS mu
                                     ON (
                                     (works_cte.db_addr = mu.other_value or works_cte.db_addr = mu.db_addr)
                                             AND mu.mimic_name LIKE works_cte.server_name || '_%')
                     ),

        process_cte AS (
                           SELECT
--                            SELECT DISTINCT ON (db_addr, server_name)
                               mimic_cte.server_name,
                               mimic_cte.db_addr,
                               mimic_cte.point_name,
                               mimic_cte.os_name,
                               mimic_cte.above_works,
                               mimic_cte.works,

                               first_value(mimic_cte.mimic_name) OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, mimic_cte.works)) as mimic_name,
                               first_value(mimic_cte.object_name) OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, mimic_cte.works)) as object_name,
                               first_value(mimic_cte.object_instance_name) OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, mimic_cte.works)) as object_instance_name,
--                                mimic_cte.mimic_name,
--                                mimic_cte.object_name,
--                                mimic_cte.object_instance_name,

                               pnp_create_process(mimic_cte.mimic_name, os_name,
                                                  mimic_cte.object_name, point_name) AS process
                               FROM mimic_cte
                       ),

        function_cte AS (
                            SELECT
--                             SELECT DISTINCT ON (db_addr, server_name)
                                process_cte.server_name,
                                process_cte.db_addr,
                                process_cte.point_name,
                                process_cte.os_name,
                                process_cte.above_works,
                                process_cte.works,


                                first_value(process_cte.mimic_name) OVER (PARTITION BY process_cte.db_addr, process_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, process_cte.works)) as mimic_name,
                                first_value(process_cte.object_name) OVER (PARTITION BY process_cte.db_addr, process_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, process_cte.works)) as object_name,
                                first_value(process_cte.object_instance_name) OVER (PARTITION BY process_cte.db_addr, process_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, process_cte.works)) as object_instance_name,
--                                 process_cte.mimic_name,
--                                 process_cte.object_name,
--                                 process_cte.object_instance_name,

                                process_cte.process,
                                pnp_create_function(process_cte.mimic_name, (process).process,
                                                    process_cte.object_name, point_name) AS function
                                FROM process_cte
                        ),

        asset_cte AS (
                         SELECT
--                          SELECT DISTINCT ON (db_addr, server_name)
                             function_cte.server_name,
                             function_cte.db_addr,
                             function_cte.point_name,
                             function_cte.os_name,
                             function_cte.above_works,
                             function_cte.works,


                             first_value(function_cte.mimic_name) OVER (PARTITION BY function_cte.db_addr, function_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, function_cte.works)) as mimic_name,
                             first_value(function_cte.object_name) OVER (PARTITION BY function_cte.db_addr, function_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, function_cte.works)) as object_name,
                             first_value(function_cte.object_instance_name) OVER (PARTITION BY function_cte.db_addr, function_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, function_cte.works)) as object_instance_name,
--                              function_cte.mimic_name,
--                              function_cte.object_name,
--                              function_cte.object_instance_name,

                             function_cte.process,
                             function_cte.function,
                             pnp_create_asset(function_cte.object_name, point_name, db_addr,
                                              (process).process) AS asset
                             FROM function_cte
                     )

    SELECT



        mimic_name,
        object_name AS object_name,
        object_instance_name AS object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process).process,
        (function).function,
        (asset).asset,
        (process).fail_flag AS process_overwritten,
        (function).fail_flag AS function_overwritten,
        (asset).overwritten AS asset_overwritten
        FROM
            asset_cte
        ORDER BY
            server_name,
            db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        process_cte.mimic_name,
        process_cte.object_name,
        process_cte.object_instance,
        process_cte.server_name,
        process_cte.db_addr,
        process_cte.point_name,
        process_cte.above_works,
        process_cte.works,
        (process_cte.process_result).process,
        -- dno why this is complaining when it literally works :O
        (process_cte.process_result).fail_flag AS process_overwritten;
;-- -. . -..- - / . -. - .-. -.--
WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        process_cte.mimic_name,
        process_cte.object_name,
        process_cte.object_instance,
        process_cte.server_name,
        process_cte.db_addr,
        process_cte.point_name,
        process_cte.above_works,
        process_cte.works,
        (process_cte.process_result).process,
        -- dno why this is complaining when it literally works :O
        (process_cte.process_result).fail_flag AS process_overwritten
from process_cte;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
    works := LOWER(works);

    -- They're already matched up with: (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- And: server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10
    -- check the mimic_name match, + 1 for each part that matches ?
    -- status_page + 5

    IF object_name LIKE '%layout%' THEN
        score := score + 10;
    END IF;

--     Add the similarity *10
    score := score + ((word_similarity(mimic_name, works)));

    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
    works := LOWER(works);

    -- They're already matched up with: (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- And: server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10
    -- check the mimic_name match, + 1 for each part that matches ?
    -- status_page + 5

    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
    score := score + ((word_similarity(mimic_name, works)));

    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT--, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
--     works := LOWER(works);

    -- They're already matched up with: (pn.db_addr = mu.other_value or pn.db_addr = mu.db_addr)
    -- And: server like mimic_name || '_%'

    -- so whats left to do is see if object name is like layout
    -- + 10
    -- check the mimic_name match, + 1 for each part that matches ?
    -- status_page + 5

    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
--     score := score + ((word_similarity(mimic_name, works)));

    
    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works,
                           pnp_create_process(
                                   mu.mimic_name,
                                   os_map.os_name,
                                   mu.object_name,
                                   pn.point_name
                           ) AS process_result
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,
    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works,
    (process_cte.process_result).process,
    -- dno why this is complaining when it literally works :O
    (process_cte.process_result).fail_flag AS process_overwritten
    from process_cte
where db_addr= 'B1002';
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works,
                           pnp_create_process(
                                   mu.mimic_name,
                                   os_map.os_name,
                                   mu.object_name,
                                   pn.point_name
                           ) AS process_result
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works,
    (process_cte.process_result).process,
    -- dno why this is complaining when it literally works :O
    (process_cte.process_result).fail_flag AS process_overwritten
    from process_cte
where db_addr= 'B1002';
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works,
                           pnp_create_process(
                                   mu.mimic_name,
                                   os_map.os_name,
                                   mu.object_name,
                                   pn.point_name
                           ) AS process_result
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)

                           where pn.db_addr = 'B1002'
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works,
    (process_cte.process_result).process,
    -- dno why this is complaining when it literally works :O
    (process_cte.process_result).fail_flag AS process_overwritten
    from process_cte
where db_addr= 'B1002';
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)

                           where pn.db_addr = 'B1002'
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
where db_addr= 'B1002';
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)

                           where pn.db_addr = 'B1002'
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
where db_addr= 'B1002';
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               -- TODO - get this working with WORKS
                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mu.mimic_name, mu.object_name) DESC))) as other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
        mimic_name,
        object_name,
        object_instance,
        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                               -- TODO - get this working with WORKS
                               coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                               coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                               coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                               coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
--         mimic_name,
--         object_name,
--         object_instance,

        coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
        coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
        coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)

                           where pn.db_addr = 'B1002'
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (

                           select

                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
    where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (

                           select

                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE upper(pn.server_name) || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
    where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (

                           select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE upper(pn.server_name) || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
    where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (

                           select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name as object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE upper(pn.server_name) || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,


--     coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--     coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--     coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
    where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (

                           select

                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


--                            mu.mimic_name,
--                            mu.object_name,
--                            mu.object_instance_name as object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE upper(pn.server_name) || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT


    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,


--     coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--     coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--     coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
    where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           
                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name as object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
    coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
    coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,



    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    from process_cte
where db_addr= 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                                -- TODO - get this working with WORKS
--                                coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                                coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                                coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                                coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                               mu.object_name,
                               mu.object_name,
                               mu.object_instance_name as object_instance,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT
--         mimic_name,
--         object_name,
--         object_instance,

        coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
        coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
        coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                                -- TODO - get this working with WORKS
--                                coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                                coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                                coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                                coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name as object_instance,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT



        mimic_name,
        object_name,
        object_instance,

--         coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--         coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--         coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                                -- TODO - get this working with WORKS
--                                coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                                coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                                coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                                coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name as object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT



        mimic_name,
        object_name,
        object_instance,

--         coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--         coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--         coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)


--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT



    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,


--     COALESCE((FIRST_VALUE(mimic_name)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS mimic_name,
--     COALESCE((FIRST_VALUE(object_name)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_name,
--     COALESCE((FIRST_VALUE(object_instance)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT



    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,


--     COALESCE((FIRST_VALUE(mimic_name)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS mimic_name,
--     COALESCE((FIRST_VALUE(object_name)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_name,
--     COALESCE((FIRST_VALUE(object_instance)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT



    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,


--     COALESCE((FIRST_VALUE(mimic_name)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS mimic_name,
--     COALESCE((FIRST_VALUE(object_name)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_name,
--     COALESCE((FIRST_VALUE(object_instance)
--               OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002' and server_name = 'SUPPLY'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT



    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,


    COALESCE((FIRST_VALUE(mimic_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS mimic_name,
    COALESCE((FIRST_VALUE(object_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_name,
    COALESCE((FIRST_VALUE(object_instance)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002' and server_name = 'SUPPLY'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)



    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,


    COALESCE((FIRST_VALUE(mimic_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS mimic_name,
    COALESCE((FIRST_VALUE(object_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_name,
    COALESCE((FIRST_VALUE(object_instance)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002' and server_name = 'SUPPLY'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)



--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    COALESCE((FIRST_VALUE(mimic_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS mimic_name,
    COALESCE((FIRST_VALUE(object_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_name,
    COALESCE((FIRST_VALUE(object_instance)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002' and server_name = 'SUPPLY'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
--                            SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               select


--                                -- TODO - get this working with WORKS
--                                (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                                (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                                (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                                (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name as object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
--     SELECT

   SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
        coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
        coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)




--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    COALESCE((FIRST_VALUE(mimic_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS mimic_name,
    COALESCE((FIRST_VALUE(object_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_name,
    COALESCE((FIRST_VALUE(object_instance)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002' and server_name = 'WASTE'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
--                            SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               select


--                                -- TODO - get this working with WORKS
--                                (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                                (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                                (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                                (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name as object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
--     SELECT

   SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        coalesce((first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as mimic_name,
        coalesce((first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_name,
        coalesce((first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)




--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    COALESCE((FIRST_VALUE(mimic_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) AS mimic_name,
    COALESCE((FIRST_VALUE(object_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) AS object_name,
    COALESCE((FIRST_VALUE(object_instance)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002' and server_name = 'WASTE'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

        select

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)




--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    COALESCE((FIRST_VALUE(mimic_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) AS mimic_name,
    COALESCE((FIRST_VALUE(object_name)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) AS object_name,
    COALESCE((FIRST_VALUE(object_instance)
              OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC))) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    WHERE
        db_addr = 'B1002' and server_name = 'WASTE'
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
--                            SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               select


--                                -- TODO - get this working with WORKS
--                                (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                                (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                                (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                                (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name as object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                               (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT

--    SELECT DISTINCT ON (db_addr, server_name)


        mimic_name,
        object_name,
        object_instance,

--         -- TODO - get this working with WORKS
--         (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
--         (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
--         (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                                select


                               -- TODO - get this working with WORKS
                               (FIRST_VALUE(mu.mimic_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
                               (FIRST_VALUE(mu.object_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                               (FIRST_VALUE(mu.object_instance_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                               (FIRST_VALUE(mu.other_value)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT

--    SELECT DISTINCT ON (db_addr, server_name)


        mimic_name,
        object_name,
        object_instance,

--         -- TODO - get this working with WORKS
--         (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
--         (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
--         (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                                select


                               -- TODO - get this working with WORKS
                               (FIRST_VALUE(mu.mimic_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
                               (FIRST_VALUE(mu.object_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                               (FIRST_VALUE(mu.object_instance_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                               (FIRST_VALUE(mu.other_value)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


--                                mu.mimic_name,
--                                mu.object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT

--    SELECT DISTINCT ON (db_addr, server_name)


        mimic_name,
        object_name,
        object_instance,

--         -- TODO - get this working with WORKS
--         (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
--         (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
--         (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                                select


                               -- TODO - get this working with WORKS
                               (FIRST_VALUE(mu.mimic_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
                               (FIRST_VALUE(mu.object_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                               (FIRST_VALUE(mu.object_instance_name)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                               (FIRST_VALUE(mu.other_value)
                                OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


--                                mu.mimic_name,
--                                mu.object_name,
--                                mu.object_instance_name AS object_instance,
--                                mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT

--    SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
        (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
        (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                                select


--                                -- TODO - get this working with WORKS
--                                (FIRST_VALUE(mu.mimic_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                                (FIRST_VALUE(mu.object_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                                (FIRST_VALUE(mu.object_instance_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                                (FIRST_VALUE(mu.other_value)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT

--    SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
        (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
        (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
                           SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                                select


--                                -- TODO - get this working with WORKS
--                                (FIRST_VALUE(mu.mimic_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                                (FIRST_VALUE(mu.object_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                                (FIRST_VALUE(mu.object_instance_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                                (FIRST_VALUE(mu.other_value)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
    SELECT

--    SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
        (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
        (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
--         function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
--         function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
--                 CROSS JOIN LATERAL pnp_create_function(
--                     process_cte.mimic_name,
--                     (process_cte.process_result).process,
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     other_value
--                                    ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
--                            SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               select


--                                -- TODO - get this working with WORKS
--                                (FIRST_VALUE(mu.mimic_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                                (FIRST_VALUE(mu.object_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                                (FIRST_VALUE(mu.object_instance_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                                (FIRST_VALUE(mu.other_value)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
--     SELECT
SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
        (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
        (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
--         function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
--         function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
--                 CROSS JOIN LATERAL pnp_create_function(
--                     process_cte.mimic_name,
--                     (process_cte.process_result).process,
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     other_value
--                                    ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
--                            SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               select


--                                -- TODO - get this working with WORKS
--                                (FIRST_VALUE(mu.mimic_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                                (FIRST_VALUE(mu.object_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                                (FIRST_VALUE(mu.object_instance_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                                (FIRST_VALUE(mu.other_value)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
                               pnp_create_process(
                                       mu.mimic_name,
                                       os_map.os_name,
                                       mu.object_name,
                                       pn.point_name
                               ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
--     SELECT
SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
        (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
        (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
--         function_result.function,
        -- dno why this is complaining when it literally works :O
--         asset_result.asset,
        (process_result).fail_flag AS process_overwritten
--         function_result.fail_flag AS function_overwritten,
--         asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
--                 CROSS JOIN LATERAL pnp_create_asset(
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     process_cte.db_addr,
--                     (process_cte.process_result).process
--                                    ) AS asset_result
--                 CROSS JOIN LATERAL pnp_create_function(
--                     process_cte.mimic_name,
--                     (process_cte.process_result).process,
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     other_value
--                                    ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
--                            SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               select


--                                -- TODO - get this working with WORKS
--                                (FIRST_VALUE(mu.mimic_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                                (FIRST_VALUE(mu.object_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                                (FIRST_VALUE(mu.object_instance_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                                (FIRST_VALUE(mu.other_value)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works,
--                                pnp_create_process(
--                                        mu.mimic_name,
--                                        os_map.os_name,
--                                        mu.object_name,
--                                        pn.point_name
--                                ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
--     SELECT
SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
        (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
        (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works
--         (process_result).process,
--         function_result.function,
        -- dno why this is complaining when it literally works :O
--         asset_result.asset,
--         (process_result).fail_flag AS process_overwritten
--         function_result.fail_flag AS function_overwritten,
--         asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
--                 CROSS JOIN LATERAL pnp_create_asset(
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     process_cte.db_addr,
--                     (process_cte.process_result).process
--                                    ) AS asset_result
--                 CROSS JOIN LATERAL pnp_create_function(
--                     process_cte.mimic_name,
--                     (process_cte.process_result).process,
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     other_value
--                                    ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        process_cte AS (
--                            SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                               select


--                                -- TODO - get this working with WORKS
--                                (FIRST_VALUE(mu.mimic_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                                (FIRST_VALUE(mu.object_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                                (FIRST_VALUE(mu.object_instance_name)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                                (FIRST_VALUE(mu.other_value)
--                                 OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,


                               mu.mimic_name,
                               mu.object_name,
                               mu.object_instance_name AS object_instance,
                               mu.other_value,

                               pn.server_name,
                               pn.db_addr,
                               pn.point_name,
                               pn.comment,
                               pnp_create_above_works() AS above_works,
                               pnp_create_works(
                                       os_map.os_name,
                                       os_fdbbool.os_name,
                                       os_constat.os_name,
                                       os_fallback.os_name,
                                       os_configstat.os_name,
                                       os_maintenance.os_name,
                                       os_connecteddb.os_name,
                                       os_siteact.os_name,
                                       os_requeststg.os_name,
                                       os_outofcont.os_name,
                                       os_outofcont.os_name,
                                       pn.point_name,
                                       pn.server_name,
                                       pn.comment
                               ) AS works
--                                pnp_create_process(
--                                        mu.mimic_name,
--                                        os_map.os_name,
--                                        mu.object_name,
--                                        pn.point_name
--                                ) AS process_result
                               FROM
                                   pnp_point_names pn
                                       LEFT JOIN mimic_usage_data AS mu
                                           ON (
                                           (pn.db_addr = mu.other_value)
                                                   AND mu.mimic_name LIKE pn.server_name || '_%')
                                       LEFT JOIN pnp_mappings AS ma
                                           ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                       LEFT JOIN pnp_outstations AS os_map
                                           ON (ma.outstation_num = os_map.os_number
                                               AND pn.server_name = os_map.nexus_name)
                                       LEFT JOIN pnp_outstations AS os_fdbbool
                                           ON (pn.server_name = os_fdbbool.nexus_name
                                               AND pn.db_addr = os_fdbbool.failure_db_bool)
                                       LEFT JOIN pnp_outstations AS os_constat
                                           ON (pn.server_name = os_constat.nexus_name
                                               AND pn.db_addr = os_constat.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_fallback
                                           ON (pn.server_name = os_fallback.nexus_name
                                               AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                       LEFT JOIN pnp_outstations AS os_configstat
                                           ON (pn.server_name = os_configstat.nexus_name
                                               AND pn.db_addr = os_configstat.config_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_maintenance
                                           ON (pn.server_name = os_maintenance.nexus_name
                                               AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                       LEFT JOIN pnp_outstations AS os_connecteddb
                                           ON (pn.server_name = os_connecteddb.nexus_name
                                               AND pn.db_addr = os_connecteddb.connected_db_bool)
                                       LEFT JOIN pnp_outstations AS os_siteact
                                           ON (pn.server_name = os_siteact.nexus_name
                                               AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                       LEFT JOIN pnp_outstations AS os_requeststg
                                           ON (pn.server_name = os_requeststg.nexus_name
                                               AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                       LEFT JOIN pnp_outstations AS os_outofcont
                                           ON (pn.server_name = os_outofcont.nexus_name
                                               AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                       )
--     SELECT
SELECT DISTINCT ON (db_addr, server_name)


--         mimic_name,
--         object_name,
--         object_instance,

        -- TODO - get this working with WORKS
        (first_value(mimic_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as mimic_name,
        (first_value(object_name) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_name,
        (first_value(object_instance) OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) as object_instance,


        server_name,
        db_addr,
        point_name,
        above_works,
        works
--         (process_result).process,
--         function_result.function,
        -- dno why this is complaining when it literally works :O
--         asset_result.asset,
--         (process_result).fail_flag AS process_overwritten
--         function_result.fail_flag AS function_overwritten,
--         asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
--                 CROSS JOIN LATERAL pnp_create_asset(
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     process_cte.db_addr,
--                     (process_cte.process_result).process
--                                    ) AS asset_result
--                 CROSS JOIN LATERAL pnp_create_function(
--                     process_cte.mimic_name,
--                     (process_cte.process_result).process,
--                     process_cte.object_name,
--                     process_cte.point_name,
--                     other_value
--                                    ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                          SELECT


                             -- TODO - get this working with WORKS
                             (FIRST_VALUE(mu.mimic_name)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
                             (FIRST_VALUE(mu.object_name)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                             (FIRST_VALUE(mu.object_instance_name)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                             (FIRST_VALUE(mu.other_value)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,

--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN mimic_usage_data AS mu
                                         ON (
                                         (pn.db_addr = mu.other_value)
                                                 AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),
        process_cte AS
            (
                SELECT

                    first_cte.mimic_name,
                    first_cte.object_name,
                    first_cte.object_instance,
                    first_cte.other_value,

                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,

                    pnp_create_process(
                            first_cte.mimic_name,
                            first_cte.os_name,
                            first_cte.object_name,
                            first_cte.point_name
                    ) AS process_result
                    FROM first_cte
            )
    SELECT
--     SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
    -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                    CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              -- TODO - get this working with WORKS
--                              (FIRST_VALUE(mu.mimic_name)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                              (FIRST_VALUE(mu.object_name)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                              (FIRST_VALUE(mu.object_instance_name)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                              (FIRST_VALUE(mu.other_value)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,

                             mu.mimic_name,
                             mu.object_name,
                             mu.object_instance_name AS object_instance,
                             mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN mimic_usage_data AS mu
                                         ON (
                                         (pn.db_addr = mu.other_value)
                                                 AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),
        process_cte AS
            (
                SELECT

                    first_cte.mimic_name,
                    first_cte.object_name,
                    first_cte.object_instance,
                    first_cte.other_value,

                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,

                    pnp_create_process(
                            first_cte.mimic_name,
                            first_cte.os_name,
                            first_cte.object_name,
                            first_cte.point_name
                    ) AS process_result
                    FROM first_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

        -- TODO - get this working with WORKS
        (FIRST_VALUE(mimic_name)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
        (FIRST_VALUE(object_name)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
        (FIRST_VALUE(object_instance)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

--         mimic_name,
--         object_name,
--         object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
    -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                    CROSS JOIN LATERAL pnp_create_asset(
                    process_cte.object_name,
                    process_cte.point_name,
                    process_cte.db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    process_cte.mimic_name,
                    (process_cte.process_result).process,
                    process_cte.object_name,
                    process_cte.point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              -- TODO - get this working with WORKS
--                              (FIRST_VALUE(mu.mimic_name)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--                              (FIRST_VALUE(mu.object_name)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                              (FIRST_VALUE(mu.object_instance_name)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                              (FIRST_VALUE(mu.other_value)
--                               OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,

                             mu.mimic_name,
                             mu.object_name,
                             mu.object_instance_name AS object_instance,
                             mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN mimic_usage_data AS mu
                                         ON (
                                         (pn.db_addr = mu.other_value)
                                                 AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),
        process_cte AS
            (
                SELECT

                    first_cte.mimic_name,
                    first_cte.object_name,
                    first_cte.object_instance,
                    first_cte.other_value,

                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,

                    pnp_create_process(
                            first_cte.mimic_name,
                            first_cte.os_name,
                            first_cte.object_name,
                            first_cte.point_name
                    ) AS process_result
                    FROM first_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

        -- TODO - get this working with WORKS
        (FIRST_VALUE(mimic_name)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
        (FIRST_VALUE(object_name)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
        (FIRST_VALUE(object_instance)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

--         mimic_name,
--         object_name,
--         object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
    -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                    CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                          SELECT


                             -- TODO - get this working with WORKS
                             (FIRST_VALUE(mu.mimic_name)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
                             (FIRST_VALUE(mu.object_name)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                             (FIRST_VALUE(mu.object_instance_name)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                             (FIRST_VALUE(mu.other_value)
                              OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,

--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN mimic_usage_data AS mu
                                         ON (
                                         (pn.db_addr = mu.other_value)
                                                 AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),
        process_cte AS
            (
                SELECT

                    first_cte.mimic_name,
                    first_cte.object_name,
                    first_cte.object_instance,
                    first_cte.other_value,

                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,

                    pnp_create_process(
                            first_cte.mimic_name,
                            first_cte.os_name,
                            first_cte.object_name,
                            first_cte.point_name
                    ) AS process_result
                    FROM first_cte
            )
    SELECT
--     SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
    -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                    CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                          SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
--                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT

                    mimic_cte.mimic_name,
                    mimic_cte.object_name,
                    mimic_cte.object_instance,
                    mimic_cte.other_value,

                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
    SELECT
--     SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
                         SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                          SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
--                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT

                    mimic_cte.mimic_name,
                    mimic_cte.object_name,
                    mimic_cte.object_instance,
                    mimic_cte.other_value,

                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
    SELECT
--     SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
    works := LOWER(works);


    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
    score := score + ((word_similarity(mimic_name, works)));


    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
--                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT

                    mimic_cte.mimic_name,
                    mimic_cte.object_name,
                    mimic_cte.object_instance,
                    mimic_cte.other_value,

                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
--                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT

--                     mimic_cte.mimic_name,
--                     mimic_cte.object_name,
--                     mimic_cte.object_instance,
--                     mimic_cte.other_value,


                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mimic_cte.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mimic_cte.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mimic_cte.object_instance)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mimic_cte.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,



                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     --                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT

--                     mimic_cte.mimic_name,
--                     mimic_cte.object_name,
--                     mimic_cte.object_instance,
--                     mimic_cte.other_value,


                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mimic_cte.mimic_name)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mimic_cte.object_name)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mimic_cte.object_instance)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mimic_cte.other_value)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,



                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        (process_result).fail_flag AS process_overwritten
        FROM
            process_cte
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
--                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT

--                     mimic_cte.mimic_name,
--                     mimic_cte.object_name,
--                     mimic_cte.object_instance,
--                     mimic_cte.other_value,


                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mimic_cte.mimic_name)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mimic_cte.object_name)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mimic_cte.object_instance)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mimic_cte.other_value)
                     OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,



                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     --                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    mu.mimic_name,
                    mu.object_name,
                    mu.object_instance_name as object_instance,
                    mu.other_value

--                     -- TODO - get this working with WORKS
--                     (FIRST_VALUE(mu.mimic_name)
--                      OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--                     (FIRST_VALUE(mu.object_name)
--                      OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                     (FIRST_VALUE(mu.object_instance_name)
--                      OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                     (FIRST_VALUE(mu.other_value)
--                      OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT

                    mimic_cte.mimic_name,
                    mimic_cte.object_name,
                    mimic_cte.object_instance,
                    mimic_cte.other_value,


--                     -- TODO - get this working with WORKS
--                     (FIRST_VALUE(mimic_cte.mimic_name)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--                     (FIRST_VALUE(mimic_cte.object_name)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--                     (FIRST_VALUE(mimic_cte.object_instance)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
--                     (FIRST_VALUE(mimic_cte.other_value)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value,

                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

        -- TODO - get this working with WORKS
        (FIRST_VALUE(mimic_name)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
        (FIRST_VALUE(object_name)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
        (FIRST_VALUE(object_instance)
         OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

--         mimic_name,
--         object_name,
--         object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        (process_result).fail_flag AS process_overwritten
        FROM
            process_cte
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)

                       SELECT

--                            coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
--                            coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
--                            coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
--                            coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,


                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                        SELECT

                           coalesce((first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as mimic_name,
                           coalesce((first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_name,
                           coalesce((first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as object_instance,
                           coalesce((first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC))) as other_value,

--                            mu.mimic_name,
--                            mu.object_name,
--                            mu.object_instance_name AS object_instance,
--                            mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, --works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
--     works := LOWER(works);


    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
--     score := score + ((word_similarity(mimic_name, works)));


    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT--, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
--     works := LOWER(works);


    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
--     score := score + ((word_similarity(mimic_name, works)));


    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                        SELECT

                           (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
                           (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
                           (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
                           (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

--                            mu.mimic_name,
--                            mu.object_name,
--                            mu.object_instance_name AS object_instance,
--                            mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
                       SELECT DISTINCT ON (pn.db_addr, pn.server_name)
--                        SELECT

                           (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
                           (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
                           (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
                           (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

--                            mu.mimic_name,
--                            mu.object_name,
--                            mu.object_instance_name AS object_instance,
--                            mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

--                            (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                            (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                            (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                            (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

--                            (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                            (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                            (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                            (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,


    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

--                            (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                            (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                            (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                            (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

    process_cte.mimic_name,
    process_cte.object_name,
    process_cte.object_instance,

--     (FIRST_VALUE(mimic_name)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
--     (FIRST_VALUE(object_name)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--     (FIRST_VALUE(object_instance)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

--                            (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                            (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                            (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                            (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,

    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

--                            (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                            (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                            (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                            (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (pn.db_addr = mu.other_value)
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,

    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) asc)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) asc)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) asc)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

--                            (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                            (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                            (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                            (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (mu.other_value = pn.db_addr )
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,

    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) asc)) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) asc)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) asc)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

--                            (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
--                            (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
--                            (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
--                            (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

                           mu.mimic_name,
                           mu.object_name,
                           mu.object_instance_name AS object_instance,
                           mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (mu.other_value = pn.db_addr )
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,

    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC )) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    process_cte.server_name,
    process_cte.db_addr,
    process_cte.point_name,
    process_cte.above_works,
    process_cte.works
    FROM process_cte
    ORDER BY
        process_cte.server_name,
        process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

                           (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
                           (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
                           (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
                           (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

--                            mu.mimic_name,
--                            mu.object_name,
--                            mu.object_instance_name AS object_instance,
--                            mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (mu.other_value = pn.db_addr )
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

--     process_cte.mimic_name,
--     process_cte.object_name,
--     process_cte.object_instance,

    (FIRST_VALUE(mimic_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC )) AS mimic_name,
    (FIRST_VALUE(object_name)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
    (FIRST_VALUE(object_instance)
     OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    server_name,
    db_addr,
    point_name,
    above_works,
    works
    FROM process_cte
    ORDER BY
        server_name,
        db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT--, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN
    score := 0;

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
--     works := LOWER(works);


    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
--     score := score + ((word_similarity(mimic_name, works)));


    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

                           (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
                           (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
                           (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
                           (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

--                            mu.mimic_name,
--                            mu.object_name,
--                            mu.object_instance_name AS object_instance,
--                            mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (mu.other_value = pn.db_addr )
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
SELECT
-- SELECT DISTINCT ON (db_addr, server_name)

    mimic_name,
    object_name,
    object_instance,

--     (FIRST_VALUE(mimic_name)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC )) AS mimic_name,
--     (FIRST_VALUE(object_name)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--     (FIRST_VALUE(object_instance)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    server_name,
    db_addr,
    point_name,
    above_works,
    works
    FROM process_cte
    ORDER BY
        server_name,
        db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
WITH
    process_cte AS (
--                        SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                       SELECT

                           (first_value(mu.mimic_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as mimic_name,
                           (first_value(mu.object_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_name,
                           (first_value(mu.object_instance_name) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as object_instance,
                           (first_value(mu.other_value) OVER (PARTITION BY pn.db_addr, pn.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) as other_value,

--                            mu.mimic_name,
--                            mu.object_name,
--                            mu.object_instance_name AS object_instance,
--                            mu.other_value,

                           pn.server_name,
                           pn.db_addr,
                           pn.point_name,
                           pn.comment,
                           pnp_create_above_works() AS above_works,
                           pnp_create_works(
                                   os_map.os_name,
                                   os_fdbbool.os_name,
                                   os_constat.os_name,
                                   os_fallback.os_name,
                                   os_configstat.os_name,
                                   os_maintenance.os_name,
                                   os_connecteddb.os_name,
                                   os_siteact.os_name,
                                   os_requeststg.os_name,
                                   os_outofcont.os_name,
                                   os_outofcont.os_name,
                                   pn.point_name,
                                   pn.server_name,
                                   pn.comment
                           ) AS works
                           FROM
                               pnp_point_names pn
                                   LEFT JOIN mimic_usage_data AS mu
                                       ON (
                                       (mu.other_value = pn.db_addr )
                                               AND mu.mimic_name LIKE pn.server_name || '_%')
                                   LEFT JOIN pnp_mappings AS ma
                                       ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                   LEFT JOIN pnp_outstations AS os_map
                                       ON (ma.outstation_num = os_map.os_number
                                           AND pn.server_name = os_map.nexus_name)
                                   LEFT JOIN pnp_outstations AS os_fdbbool
                                       ON (pn.server_name = os_fdbbool.nexus_name
                                           AND pn.db_addr = os_fdbbool.failure_db_bool)
                                   LEFT JOIN pnp_outstations AS os_constat
                                       ON (pn.server_name = os_constat.nexus_name
                                           AND pn.db_addr = os_constat.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_fallback
                                       ON (pn.server_name = os_fallback.nexus_name
                                           AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                   LEFT JOIN pnp_outstations AS os_configstat
                                       ON (pn.server_name = os_configstat.nexus_name
                                           AND pn.db_addr = os_configstat.config_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_maintenance
                                       ON (pn.server_name = os_maintenance.nexus_name
                                           AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                   LEFT JOIN pnp_outstations AS os_connecteddb
                                       ON (pn.server_name = os_connecteddb.nexus_name
                                           AND pn.db_addr = os_connecteddb.connected_db_bool)
                                   LEFT JOIN pnp_outstations AS os_siteact
                                       ON (pn.server_name = os_siteact.nexus_name
                                           AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                   LEFT JOIN pnp_outstations AS os_requeststg
                                       ON (pn.server_name = os_requeststg.nexus_name
                                           AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                   LEFT JOIN pnp_outstations AS os_outofcont
                                       ON (pn.server_name = os_outofcont.nexus_name
                                           AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                   )
-- SELECT
SELECT DISTINCT ON (db_addr, server_name)

    mimic_name,
    object_name,
    object_instance,

--     (FIRST_VALUE(mimic_name)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC )) AS mimic_name,
--     (FIRST_VALUE(object_name)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
--     (FIRST_VALUE(object_instance)
--      OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,


    server_name,
    db_addr,
    point_name,
    above_works,
    works
    FROM process_cte
    ORDER BY
        server_name,
        db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN
    score := 0;

    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
    works := LOWER(works);


    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
    score := score + ((word_similarity(mimic_name, works)));


    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         -- above works, works and mimic
--                          SELECT DISTINCT ON (pn.db_addr, pn.server_name)
                         SELECT


--                              mu.mimic_name,
--                              mu.object_name,
--                              mu.object_instance_name AS object_instance,
--                              mu.other_value,

                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
--                                      LEFT JOIN mimic_usage_data AS mu
--                                          ON (
--                                          (pn.db_addr = mu.other_value)
--                                                  AND mu.mimic_name LIKE pn.server_name || '_%')
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    -- TODO - get this working with WORKS
                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

--                     mu.mimic_name,
--                     mu.object_name,
--                     mu.object_instance_name as object_instance,
--                     mu.other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')

            ),

        process_cte AS
            (
                SELECT
                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,


                    mimic_cte.mimic_name,
                    mimic_cte.object_name,
                    mimic_cte.object_instance,
                    mimic_cte.other_value,

--                     -- TODO - get this working with WORKS
--                     (FIRST_VALUE(mimic_cte.mimic_name)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--                     (FIRST_VALUE(mimic_cte.object_name)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--                     (FIRST_VALUE(mimic_cte.object_instance)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,
--                     (FIRST_VALUE(mimic_cte.other_value)
--                      OVER (PARTITION BY mimic_cte.db_addr, mimic_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS other_value,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
--     SELECT
    SELECT DISTINCT ON (db_addr, server_name)

--         -- TODO - get this working with WORKS
--         (FIRST_VALUE(mimic_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
--         (FIRST_VALUE(object_name)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_name,
--         (FIRST_VALUE(object_instance)
--          OVER (PARTITION BY db_addr, server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS object_instance,

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_mimic_prioritiser
    (
        mimic_name TEXT, object_name TEXT, works TEXT
    )
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    score INTEGER;
BEGIN
    score := 0;
    mimic_name := LOWER(mimic_name);
    object_name := LOWER(object_name);
    works := LOWER(works);


    IF object_name LIKE '%layout%' THEN
        score := score + 100;
    END IF;

--     Add the similarity *10
    score := score + ((word_similarity(mimic_name, works)));


    IF object_name = 'status_page' THEN
        score := score + 5;
    END IF;

    RETURN score;
END;
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_process
    (
        mimic_name TEXT, os_name TEXT, object_name TEXT, point_name TEXT
    )
    RETURNS TABLE
                (
                    process TEXT,
                    -- as overwritten->by
                    -- old -> new
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    os_name := LOWER(os_name);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    fail_flag := '';

    -- Dosing
    IF
        mimic_name LIKE '%chemical%' OR
            mimic_name LIKE '%dosing%' OR
            os_name LIKE '%chemical%' OR
            os_name LIKE '%dosing%' OR
            -- #
            mimic_name ~* 'ortho|sodium|phosphoric' OR
            os_name ~* 'ortho|sodium|phosphoric' OR
            -- #
            point_name LIKE '%dosing%' OR
            point_name LIKE '%cl2%' OR
            point_name LIKE '%sodium hypo%' OR
            point_name LIKE '%chlorine%'
    THEN
        process := 'Dosing';
    END IF;

    -- Treatment
    IF mimic_name LIKE '%treatment%' OR os_name LIKE '%treatment%' THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Treatment';
    END IF;

    -- Abstraction
    IF mimic_name LIKE '%inlet%' OR
        os_name LIKE '%inlet%' OR
        mimic_name LIKE '%boreholes%' OR
        os_name LIKE '%boreholes%' OR
        point_name LIKE '%borehole%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Abstraction';
    END IF;

    -- Distribution
    IF mimic_name LIKE '%booster%' OR
        os_name LIKE '%booster%' OR
        point_name LIKE '%booster%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Distribution';
    END IF;

    -- SITE SITE SITE SITE SITE
    IF point_name LIKE '%site mains supply' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%ostn mains supply%' OR
        point_name LIKE '%ostn battery%' OR
        point_name LIKE '%ostn battery charge%' OR
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%incoming mains%' OR
        point_name LIKE '%spare%' OR
        point_name LIKE '%busbar%' OR
        point_name LIKE '%comms%' OR
        point_name LIKE '%watchdog%' OR
        point_name LIKE '%security%' OR
        point_name LIKE '%intruder%' OR
        point_name LIKE '%mains supply%' OR
        -- Generator
        object_name LIKE '%generator%' OR
        point_name LIKE '%generator%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Site';
    END IF;

    -- Reservoirs
    -- todo think this should be if point_name like '%tank%' as well
    IF object_name LIKE '%tank%' OR
        object_name LIKE '%res_%' OR
        object_name LIKE '%_res%' -- I think this works?
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR
        point_name LIKE '%sump%'
    THEN
        IF process IS NOT NULL THEN -- cant remember why this is here - think it was overwriting with the same process? AND process <> 'Storage'
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Storage';
    END IF;

    -- Filtration
    IF object_name = 'filter' OR -- think this should be a LIKE cos there is 'bio_filter'
        object_name = 'bio_filter' OR
        object_name = 'sand_filter' OR
        point_name LIKE '%filter%' OR -- this will get overwritten by 'pre sandfilter'
        point_name LIKE '%filtration%'
    THEN
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Filtration';
    END IF;


    if point_name like '%pre sandfilter%' and point_name like '%phosphate%'
    then
        IF process IS NOT NULL THEN -- TODO - probs put a check for if process is 'Filtration' cos it will be set already from filtration section
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Dosing';
    END IF;

    if point_name like '%post sandfilter%' and point_name like '%phosphate%'
    then
        IF process IS NOT NULL THEN
            fail_flag := fail_flag || process || ' ';
        END IF;
        process := 'Dosing';
    END IF;



    -- LOWEST PRIORITY - so only set if process is still null, shouldn't overwrite any process ever
    IF process IS NULL
    THEN
        BEGIN
            IF mimic_name LIKE '%sps%' OR
                os_name LIKE '%sps%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Pumping Station';
            END IF;

            IF mimic_name LIKE '%stw%' OR
                os_name LIKE '%stw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Sewage Treatment Works';
            END IF;

            IF mimic_name LIKE '%wtw%' OR
                os_name LIKE '%wtw%'
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Water Treatment Works';
            END IF;

            IF os_name LIKE '%ps%' and process <> 'Sewage Pumping Station' -- not sure but guessing check for this
            THEN
                IF process IS NOT NULL THEN
                    fail_flag := fail_flag || process || ' ';
                END IF;
                process := 'Pumping Station';
            END IF;
        END;
    END IF;

    IF process IS NULL THEN
        process := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_asset
    (
        object_name TEXT, point_name TEXT, db_addr TEXT, process TEXT
    )
    RETURNS TABLE
                (
                    asset TEXT,
                    overwritten TEXT
                )
    LANGUAGE plpgsql
AS
$$
DECLARE
    pump_pos INT;
    pump_num TEXT;
    pump_num_part TEXT;
    address_type TEXT;
    pump_acro TEXT;
BEGIN
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    overwritten := '';

    -- todo - this needs better filtering, think '%pump%sump%' should be tank (below)
    IF point_name LIKE '%pump%' OR (point_name LIKE '%pmp%' AND object_name LIKE '%pump%')
    THEN
        IF point_name LIKE '%pump%' THEN
            pump_acro = 'pump';
        ELSIF point_name LIKE '%pmp%' THEN
            pump_acro = 'pmp';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Pump ' || pump_num);
        ELSE
            asset := 'Pump';
        END IF;
    END IF;

    IF object_name LIKE '%pump%' AND process = 'water treatment works' AND asset NOT LIKE 'Pump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pump';
    END IF;

    -- Reservoirs
    IF object_name = 'conical_res' OR
        object_name = 'covered_res' OR
        object_name = 'res_diagnostic_grid' OR
        object_name = 'reservoir_grid' OR
        object_name = 'reservoirs_grid' OR
        object_name = 'reservoir_symbols_grid' OR
        object_name = 'res_level' OR
        object_name = 'res_security_grid"' OR
        object_name = 'res_security_table' OR
        object_name = 'res_sites_grid'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Tank';
    END IF;


    -- Tank
    IF object_name LIKE '%tank%' OR point_name LIKE '%tank%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('tank' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Tank ' || UPPER(pump_num));
        ELSE
            asset := 'Tank';
        END IF;
    END IF;

    -- Sump
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('sump' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 4));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+[A-Za-z]?$' THEN
            asset := ('Sump ' || UPPER(pump_num));
        ELSE
            asset := 'Sump';
        END IF;
    END IF;

    -- Flow
    -- todo - if dbname contains word flow or acronyms & object_name IS NOT analog_value, asset = Flow -- so the same thing then.. ?
    IF (point_name LIKE '%flow%' OR
        point_name LIKE '%flw%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Flow Meter';
    END IF;

    -- Pressure
    IF (point_name LIKE '%pressure%' OR
        point_name LIKE '%pr%' OR
        point_name LIKE '%pres%' OR
        point_name LIKE '%prss%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Pressure Meter';
    END IF;

    -- Turbidity
    IF (point_name LIKE '%turbidity%' OR
        point_name LIKE '%turb%')
            AND
        (object_name = 'analog_value' OR
            object_name = 'digital_text')
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Turbidity Meter';
    END IF;

    -- Generator
    IF point_name LIKE '%generator%' OR
        object_name LIKE '%generator%'
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Generator';
    END IF;

    -- Spare
    IF point_name LIKE '%spare%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        address_type = SUBSTRING(db_addr, 1, 1);
        IF address_type = 'C' THEN
            asset := 'Character';
        ELSEIF address_type = 'B' THEN
            asset := 'Boolean';
        ELSEIF address_type = 'E' THEN
            asset := 'Analogue';
        ELSE
            -- todo - not sure what else should be asset := ed here, there's P and S to deal with
            asset := 'Spare';
        END IF;
    END IF;

    -- Busbar
    IF point_name LIKE '%busbar%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Busbar';
    END IF;

    -- Site
    IF point_name LIKE '%rtu%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'RTU';
    END IF;
    IF point_name LIKE '%plc%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'PLC';
    END IF;
    IF point_name LIKE '%ups%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'UPS';
    END IF;
    IF point_name LIKE '%telemetry%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Telemetry';
    END IF;
    IF point_name LIKE '%mains supply%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Mains Supply';
    END IF;
    IF point_name LIKE '%site power status flag%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Site Power Status Flag';
    END IF;
    IF point_name LIKE '%battery%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery';
    END IF;
    IF point_name LIKE '%battery charge%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Battery Charge';
    END IF;
    IF point_name LIKE '%firmware version%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Firmware Version';
    END IF;
    IF point_name LIKE '%signal strength%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Signal Strength';
    END IF;

    IF point_name LIKE '%intruder%' AND process = 'site' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intruder';
    END IF;

    -- Vents
    IF point_name LIKE '%vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Fan';
    END IF;
    IF point_name LIKE '%vent system%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent System';
    END IF;
    IF point_name LIKE '%ventilation panel%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Ventilation Panel';
    END IF;
    IF point_name LIKE '%vent stack%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Vent Stack';
    END IF;
    IF point_name LIKE '%intake vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Intake Vent Fan';
    END IF;
    IF point_name LIKE '%extract vent fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Extract Vent Fan';
    END IF;

    -- Ventilation Fans Numbered
    IF point_name LIKE '%ventilation fan%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('ventilation fan' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 15));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Ventilation Fan ' || pump_num);
        ELSE
            pump_num = (SPLIT_PART(pump_num_part, ' ', 2));
            IF pump_num ~ '^[0-9]+$' THEN
                asset := ('Ventilation Fan ' || pump_num);
            ELSE
                asset := 'Ventilation Fan';
            END IF;
        END IF;
    END IF;

    IF point_name LIKE '%gas store vent%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Gas Store Vent';
    END IF;

    -- Valves
    IF point_name LIKE '%tank vlv%' OR
        point_name LIKE '%valve%'
        --         point_name LIKE '%vlv%' OR  -> part of valves numbered
--         object_name LIKE '%valve%' -> part of valves numbered
    THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        asset := 'Valve';
    END IF;

    -- Valves Numbered
    IF point_name LIKE '%vlv%' OR point_name LIKE '%valve%' THEN
        IF point_name LIKE '%vlv%' THEN
            pump_acro = 'vlv';
        ELSIF point_name LIKE '%valve%' THEN
            pump_acro = 'valve';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Valve ' || pump_num);
        ELSE
            asset := 'Valve';
        END IF;
    END IF;

    -- Compressor (Numbered)
    IF point_name LIKE '%compressor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('compressor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Compressor ' || pump_num);
        ELSE
            asset := 'Compressor';
        END IF;
    END IF;

    -- Monitor / MON (Numbered)
    IF point_name LIKE '%monitor%' OR point_name ~* '\ymon\y' -- 'mon' as its own word
    THEN
        IF point_name LIKE '%monitor%' THEN
            pump_acro = 'monitor';
        ELSIF point_name ~* '\ymon\y' THEN
            pump_acro = 'mon';
        END IF;
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION(pump_acro IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + LENGTH(pump_acro)));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[0-9]+$' THEN
            asset := ('Monitor ' || pump_num);
        ELSE
            asset := 'Monitor';
        END IF;
    END IF;


    -- UV Reactor (Numbered)
    IF point_name LIKE '%uv reactor%' THEN
        IF asset IS NOT NULL THEN
            overwritten := overwritten || asset || ' ';
        END IF;
        pump_pos = POSITION('uv reactor' IN point_name);
        pump_num_part = TRIM(SUBSTRING(point_name, pump_pos + 10));
        pump_num = (SPLIT_PART(pump_num_part, ' ', 1));
        IF pump_num ~ '^[a-zA-Z]$' OR pump_num ~ '^\d+$' THEN
            asset := ('UV Reactor  ' || UPPER(pump_num));
        ELSE
            asset := 'UV Reactor';
        END IF;
    END IF;

    -- Unknown
    IF asset IS NULL THEN
        asset := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_function
    (
        mimic_name TEXT, process TEXT, object_name TEXT, point_name TEXT, other_value TEXT, os_name TEXT
    )
    RETURNS TABLE
                (
                    function TEXT,
                    fail_flag TEXT
                )
    LANGUAGE plpgsql
AS
$$
BEGIN
    mimic_name := LOWER(mimic_name);
    other_value := LOWER(other_value);
    process := LOWER(process);
    object_name := LOWER(object_name);
    point_name := LOWER(point_name);
    os_name := LOWER(os_name);
    fail_flag := '';

    IF (mimic_name LIKE '%chemical%' OR mimic_name LIKE '%dosing%') AND process = 'dosing' THEN
        IF other_value LIKE '%coagulant' OR
            other_value LIKE '%coag%'
        THEN
            function := 'Coagulant';
        END IF;
    END IF;

    IF point_name LIKE '%cl2%' OR
        point_name LIKE '%chlorine%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%ortho%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    IF point_name LIKE '%sodium hypo dosing%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF point_name LIKE '%hypo%' AND point_name LIKE '%tank%'
    THEN
        IF function IS NOT NULL AND function <> 'Hypochlorite' THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Hypochlorite';
    END IF;

    IF (point_name LIKE '%acid%' OR
        point_name LIKE '%alum%' OR
        point_name LIKE '%caustic%' OR
        point_name LIKE '%soda%')
            AND
        process = 'dosing'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chemical';
    END IF;

    -- Pumps
    IF point_name LIKE '%pump%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        CASE
            WHEN point_name LIKE '%borehole pump%'
                THEN function := 'Borehole';
            WHEN point_name LIKE '%booster pump%'
                THEN function := 'Booster';
            WHEN point_name LIKE '%backwash pump%'
                THEN function := 'Backwash';

            -- todo - need to fix for when point_name is like: 120120PUMP HALL SUMP -- should this be sump or PUMP???
            -- fixme - for now done sump%pump and pump%sump -- this might work idk though
            WHEN point_name LIKE '%sump%pump%'
                THEN function := 'Sump Pump';

            -- PUMP SUMP IN HERE - works better this way I think
            WHEN point_name LIKE '%pump%sump%'
                THEN function := 'Sump';

            ELSE function := 'Pump Set';
        END CASE;
    END IF;

    -- Sump
    --                          check Sump isn't already set from above
    IF object_name LIKE '%sump%' OR point_name LIKE '%sump%'
    THEN
        -- This *might* be right
        IF function IS NULL OR function <> 'Pump Set' AND function <> 'Sump Pump' AND function <> 'Sump'
        THEN
            IF function IS NOT NULL THEN
                fail_flag := fail_flag || function || ' ';
            END IF;
            function := 'Sump';
        END IF;
    END IF;

    -- Reservoirs
    -- todo - UNLESS PREFIXED WITH A CHEMICAL, THEN THIS IS OVERWRITTEN.....
    IF object_name LIKE '%reservoir%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;

    -- Reservoir (again)
    IF (point_name LIKE '%reservoir' OR point_name LIKE '%res%') AND process = 'storage'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Reservoir';
    END IF;


    -- Generator
    IF object_name = 'generator' OR
        point_name LIKE '%generator%' OR
        point_name LIKE '%gen%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- Site -> Power
    -- If point_name LIKE '%site power status flag%' OR point_name LIKE '%site mains supply%' OR
    -- above changed to:
    IF point_name LIKE '%site mains supply%' OR
        point_name LIKE '%site power status flag%' OR
        point_name LIKE '%mains supply%' OR
        point_name LIKE '%ostn mains supply' OR -- this isnt needed
        point_name LIKE '%ostn battery' OR
        point_name LIKE '%ostn battery charge%' OR -- not needed
        point_name LIKE '%backup battery%' OR
        point_name LIKE '%incoming mains function%' OR
        point_name LIKE '%busbar%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Power';
    END IF;

    -- More Site -> Security
    IF point_name LIKE '%ostn watchdog%' OR
        point_name LIKE '%plc watchdog%' OR
        point_name LIKE '%rtu watchdog%' OR
        point_name LIKE '%site security%' OR
        point_name LIKE '%firmware%' OR
        point_name LIKE '%intruder%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    -- site x3 -> System
    IF point_name LIKE '%site communications%' OR
        point_name LIKE '%telemetry%' OR
        point_name LIKE '%signal strength%' OR
        point_name LIKE '%comms%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'System';
    END IF;

    -- Vents
    -- 'But no chemical identifier such as cl2/ortho', so just this?
    IF point_name LIKE '%ventilation fan%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Heating Ventilation Air Conditioning';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%chlorine%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Chlorine';
    END IF;

    IF point_name LIKE '%vent fan%' AND point_name LIKE '%ortho%' -- already set above so idk why here again
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Orthophosphoric';
    END IF;

    -- Filter
    IF object_name LIKE '%filter%' AND point_name LIKE '%gac%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'GAC';
    END IF;

    -- Water Quality
    IF point_name LIKE '%filter%'
            AND
        (point_name LIKE '%press%' OR
            point_name LIKE '%pres%' OR
            point_name LIKE '%pressure%' OR
            point_name LIKE '%prss%' OR
            point_name LIKE '%pr%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #2
    IF (point_name LIKE '%raw wtr ph%' OR
        point_name LIKE '%raw ph%' OR
        point_name LIKE '%ph%' OR
        point_name LIKE '%raw wtr turbidity%' OR
        point_name LIKE '%raw wtr turb%' OR
        point_name LIKE '%turbidity%' OR
        point_name LIKE '%raw wtr samp%' OR
        point_name LIKE '%raw water quality monitors%')
            AND
        (process = 'abstraction')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    -- Water Quality #3 todo - Brandon not sure
    IF point_name LIKE '%neutralisation%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Water Quality';
    END IF;

    --Spare
    IF point_name LIKE '%spare%' THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        -- in the document it says spare but Brandon said spare on teams... ¯\_(ツ)_/¯
        function := 'Spare';
    END IF;


    -- Scraper - No answer given yet
    IF point_name LIKE '%scraper'
            AND
        (process = 'sewage treatment works' OR process = 'sewage pumping station')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Scraper(?)';
    END IF;

    -- Sedimentation
    IF (point_name LIKE '%sedimentation tank' AND process = 'sewage treatment works')
            OR
        (point_name LIKE '%sediment tank%')
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Sedimentation';
    END IF;


    -- TODO - fix these priorities
    -- TANKS:
    -- (1st Priority) Security
    IF point_name LIKE '%contact tank%' AND process = 'water treatment works' and os_name like '%security%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;

    IF point_name LIKE '%tank security%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Security';
    END IF;


    --(2nd Priority) Contact Tank
    IF point_name LIKE '%contact tank%'
    THEN
        -- can do and function <> 'Security' but there's other security like ostn watchdog stuffs
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact Tank';
    END IF;

    -- Aeration
    IF point_name LIKE '%aeration%' AND process = 'sewage treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Aeration';
    END IF;

    -- Waste
    IF point_name LIKE '%waste tank%' OR
        point_name LIKE '%waste water tank%' OR
        point_name LIKE '%waste wtr tank%' OR
        point_name LIKE '%sludge tank%' OR
        point_name LIKE '%washwtr tank%' OR
        point_name LIKE '%washwtr break tank%' OR
        point_name LIKE '%storm tank%' OR
        point_name LIKE '%storm storage tank%' OR
        point_name LIKE '%sldg trans pmp%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := ' Waste';
    END IF;

    -- Backwash
    IF point_name LIKE '%backwash tank%' OR
        point_name LIKE '%backwash return tank%' OR
        point_name LIKE '%backwash balance tank%' OR
        point_name LIKE '%backwash water tank%' OR
        point_name LIKE '%backwash trigger tank%'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Backwash';
    END IF;

    -- Contact
    IF point_name LIKE '%balance tank' OR
        point_name LIKE '%balancing tank%'
                AND point_name NOT LIKE '%backwash balance tank%' -- Brandon says backwash is priority so don't overwrite
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Contact';
    END IF;

    -- Floculator
    IF point_name LIKE '%floculator%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Floculator';
    END IF;

    -- Disinfection
    IF point_name LIKE '%sulphuric%' AND process = 'water treatment works'
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Disinfection';
    END IF;

    -- Digestion
    IF (point_name LIKE '%digester%')
            AND
        (process = 'water treatment works' OR process = 'treatment') -- treatment isnt on??? todo - should this be LIKE
    THEN
        IF function IS NOT NULL THEN
            fail_flag := fail_flag || function || ' ';
        END IF;
        function := 'Digester';
    END IF;

    -- No Clear Indication
    IF function IS NULL THEN
        function := 'Unknown';
    END IF;

    RETURN NEXT;
END
$$;
;-- -. . -..- - / . -. - .-. -.--
DROP MATERIALIZED VIEW IF EXISTS pnp_point_hierarchy_view;
;-- -. . -..- - / . -. - .-. -.--
CREATE MATERIALIZED VIEW pnp_point_hierarchy_view AS
    WITH
        first_cte AS (
                         SELECT
                             pn.server_name,
                             pn.db_addr,
                             pn.point_name,
                             pn.comment,
                             os_map.os_name,
                             pnp_create_above_works() AS above_works,
                             pnp_create_works(
                                     os_map.os_name,
                                     os_fdbbool.os_name,
                                     os_constat.os_name,
                                     os_fallback.os_name,
                                     os_configstat.os_name,
                                     os_maintenance.os_name,
                                     os_connecteddb.os_name,
                                     os_siteact.os_name,
                                     os_requeststg.os_name,
                                     os_outofcont.os_name,
                                     os_outofcont.os_name,
                                     pn.point_name,
                                     pn.server_name,
                                     pn.comment
                             ) AS works
                             FROM
                                 pnp_point_names pn
                                     LEFT JOIN pnp_mappings AS ma
                                         ON (pn.server_name = ma.nexus_name AND pn.db_addr = ma.db_point_addr)
                                     LEFT JOIN pnp_outstations AS os_map
                                         ON (ma.outstation_num = os_map.os_number
                                             AND pn.server_name = os_map.nexus_name)
                                     LEFT JOIN pnp_outstations AS os_fdbbool
                                         ON (pn.server_name = os_fdbbool.nexus_name
                                             AND pn.db_addr = os_fdbbool.failure_db_bool)
                                     LEFT JOIN pnp_outstations AS os_constat
                                         ON (pn.server_name = os_constat.nexus_name
                                             AND pn.db_addr = os_constat.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_fallback
                                         ON (pn.server_name = os_fallback.nexus_name
                                             AND pn.db_addr = os_fallback.auto_fallback_db_bool)
                                     LEFT JOIN pnp_outstations AS os_configstat
                                         ON (pn.server_name = os_configstat.nexus_name
                                             AND pn.db_addr = os_configstat.config_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_maintenance
                                         ON (pn.server_name = os_maintenance.nexus_name
                                             AND pn.db_addr = os_maintenance.maintenance_db_bool)
                                     LEFT JOIN pnp_outstations AS os_connecteddb
                                         ON (pn.server_name = os_connecteddb.nexus_name
                                             AND pn.db_addr = os_connecteddb.connected_db_bool)
                                     LEFT JOIN pnp_outstations AS os_siteact
                                         ON (pn.server_name = os_siteact.nexus_name
                                             AND pn.db_addr = os_siteact.site_activity_timeout_db_bool)
                                     LEFT JOIN pnp_outstations AS os_requeststg
                                         ON (pn.server_name = os_requeststg.nexus_name
                                             AND pn.db_addr = os_requeststg.request_stage_status_db_mbit)
                                     LEFT JOIN pnp_outstations AS os_outofcont
                                         ON (pn.server_name = os_outofcont.nexus_name
                                             AND pn.db_addr = os_outofcont.out_of_contact_db_bool)
                     ),

        mimic_cte AS
            (
                SELECT
                    first_cte.server_name,
                    first_cte.db_addr,
                    first_cte.point_name,
                    first_cte.comment,
                    first_cte.above_works,
                    first_cte.works,
                    first_cte.os_name,

                    (FIRST_VALUE(mu.mimic_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name, works) DESC)) AS mimic_name,
                    (FIRST_VALUE(mu.object_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_name,
                    (FIRST_VALUE(mu.object_instance_name)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS object_instance,
                    (FIRST_VALUE(mu.other_value)
                     OVER (PARTITION BY first_cte.db_addr, first_cte.server_name ORDER BY pnp_mimic_prioritiser(mimic_name, object_name) DESC)) AS other_value

                    FROM
                        first_cte
                            LEFT JOIN mimic_usage_data AS mu
                                ON (
                                (first_cte.db_addr = mu.other_value)
                                        AND mu.mimic_name LIKE first_cte.server_name || '_%')
            ),

        process_cte AS
            (
                SELECT
                    mimic_cte.server_name,
                    mimic_cte.db_addr,
                    mimic_cte.point_name,
                    mimic_cte.comment,
                    mimic_cte.above_works,
                    mimic_cte.works,

                    mimic_cte.mimic_name,
                    mimic_cte.object_name,
                    mimic_cte.object_instance,
                    mimic_cte.other_value,

                    pnp_create_process(
                            mimic_cte.mimic_name,
                            mimic_cte.os_name,
                            mimic_cte.object_name,
                            mimic_cte.point_name
                    ) AS process_result
                    FROM mimic_cte
            )
    SELECT DISTINCT ON (db_addr, server_name)

        mimic_name,
        object_name,
        object_instance,

        server_name,
        db_addr,
        point_name,
        above_works,
        works,
        (process_result).process,
        function_result.function,
        -- dno why this is complaining when it literally works :O
        asset_result.asset,
        (process_result).fail_flag AS process_overwritten,
        function_result.fail_flag AS function_overwritten,
        asset_result.overwritten AS asset_overwritten
        FROM
            process_cte
                CROSS JOIN LATERAL pnp_create_asset(
                    object_name,
                    point_name,
                    db_addr,
                    (process_cte.process_result).process
                                   ) AS asset_result
                CROSS JOIN LATERAL pnp_create_function(
                    mimic_name,
                    (process_cte.process_result).process,
                    object_name,
                    point_name,
                    other_value
                                   ) AS function_result
        ORDER BY
            process_cte.server_name,
            process_cte.db_addr;
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               ORDER BY other_value;
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               ORDER BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               WHERE other_value is not null
                               ORDER BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               WHERE other_value is not null and other_value <> ''
                               ORDER BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               WHERE other_value is not null and other_value <> ''
                               group BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               WHERE other_value is not null and other_value <> ''
                               order BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               WHERE other_value is not null and other_value <> ''
                               and other_value <> ' '
                               order BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               WHERE other_value is not null and other_value <> ''
                               and other_value <> ' ' and other_value <> '%'
                               order BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
select mimic_name, other_value from mimic_usage_data
                               WHERE other_value is not null and other_value <> ''
                               and other_value <> ' ' and other_value <> ' %'
                               order BY other_value, split_part(mimic_name, '_', 1);
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
        SELECT os_name
            INTO full_works
            FROM pnp_outstations
            WHERE
                os_name LIKE SUBSTRING(point_name, 1, 6) || '%'
                AND server_name = nexus_name;
        IF full_works IS NULL THEN
            full_works = 'Unknown';
        END IF;
    END IF;


    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('tsf', 'ostn', 'stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
CREATE OR REPLACE FUNCTION pnp_create_works
    (
        mapped_name TEXT,
        failure_dbbool_name TEXT,
        connectionstat TEXT,
        commandstat TEXT,
        autofallback TEXT,
        configstat TEXT,
        maintenancedbbool TEXT,
        connecteddbbool TEXT,
        siteactivity TEXT,
        requeststage TEXT,
        outofcontact TEXT,
        point_name TEXT,
        server_name TEXT,
        comment TEXT
    )
    RETURNS TEXT
    LANGUAGE plpgsql
AS
$$
DECLARE
    full_works TEXT;
    site_id1 TEXT;
    site_id2 TEXT;
    site_name TEXT;
    part TEXT;
    final_works TEXT = '';
BEGIN
    full_works := COALESCE(
            mapped_name, failure_dbbool_name, connectionstat,
            commandstat, autofallback, configstat, maintenancedbbool,
            connecteddbbool, siteactivity, requeststage, outofcontact,
            'Unknown'
                  );

    -- If no works found, check 'comment' for RTL,
    -- if 'rtl' is in it, then take the first 6 numbers from the dbpoint and match to os_name, along with server = nexus_name
    IF full_works = 'Unknown' AND LOWER(comment) LIKE '%rtl%' THEN
        SELECT os_name
            INTO full_works
            FROM pnp_outstations
            WHERE
                os_name LIKE SUBSTRING(point_name, 1, 6) || '%'
                AND server_name = nexus_name;
        IF full_works IS NULL THEN
            full_works = 'Unknown';
        END IF;
    END IF;


    IF full_works != 'Unknown' THEN
        -- space after first siteID
        site_id1 := SUBSTRING(full_works, 1, 6) || ' ';

        -- Check if any of the next 6 characters (7th to 12th) are numeric
        IF SUBSTRING(full_works, 7, 6) ~ '[0-9]' THEN
            -- If any numeric characters found, insert a space after the 12th character
            site_name := INITCAP(SUBSTRING(full_works FROM 13));
            site_id2 := SUBSTRING(full_works, 7, 6) || ' ';
            full_works := site_id1 || site_id2 || site_name;
        ELSE
            -- no second id
            site_name := INITCAP(SUBSTRING(full_works FROM 7));
            full_works := site_id1 || site_name;
        END IF;


        -- uppercase matches of stw etc.
        FOREACH part IN ARRAY STRING_TO_ARRAY(full_works, ' ')
            LOOP
            -- these will need to be confirmed, there are some i've added and some i haven't that not fully sure on:
            --- Vw -> Barrington West End Vw -> Think this is View so not gonna do VW
            -- same for St
                IF LOWER(part) IN ('sq', 'tsf', 'ostn', 'stw', 'sbr', 'sps', 'plc', 'rsps', 'gbt', 'ps', 'wtw', 'edm', 'res', 'abp', 'rtu',
                                   'cp', 'azp', 'cso', 'os', 'it', 'drv', 'est', 'pl', 'in', 'uhf', 'wrc', 'prv', 'dbn',
                                   'opp', 'fm') OR LOWER(part) LIKE ('plc%') THEN
                    part := UPPER(part);
                    final_works := final_works || part || ' ';
                ELSE
                    final_works := final_works || part || ' ';
                END IF;
            END LOOP;
        final_works := RTRIM(final_works);
        RETURN final_works;

    END IF;
    RETURN full_works;

END
$$;
;-- -. . -..- - / . -. - .-. -.--
grant
    all
    on table pnp_mappings to apisrv;
;-- -. . -..- - / . -. - .-. -.--
grant all on DATABASE wessexarh to apisrv;
;-- -. . -..- - / . -. - .-. -.--
CREATE TABLE pnp_outstations
(
    os_address                    text,
    os_name                       text,
    os_number                     text,
    nexus_name                    text,
    failure_db_bool               text,
    connection_status_db_mbit     text,
    command_status_db_mbit        text,
    auto_fallback_db_bool         text,
    config_status_db_mbit         text,
    maintenance_db_bool           text,
    connected_db_bool             text,
    site_activity_timeout_db_bool text,
    request_stage_status_db_mbit  text,
    out_of_contact_db_bool        text,
    primary key (nexus_name, os_number)
);
;-- -. . -..- - / . -. - .-. -.--
select * from data_db_string;
;-- -. . -..- - / . -. - .-. -.--
CREATE TABLE pnp_mappings
(
    db_point_addr    text NOT NULL,
    outstation_num   text NOT NULL,
    nexus_name      text NOT NULL,
    primary key (nexus_name, db_point_addr, outstation_num)
);
;-- -. . -..- - / . -. - .-. -.--
CREATE TABLE pnp_point_names
    (
        point_name TEXT NULL,
        db_addr TEXT NULL,
        server_name TEXT NULL,
        comment TEXT NULL,
        PRIMARY KEY (server_name, db_addr)
    );